/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file contains protocol buffers that are used for ClustStatus

option java_package = "org.apache.hadoop.hbase.protobuf.generated";
option java_outer_classname = "ClusterStatusProtos";
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

import "HBase.proto";
import "ClusterId.proto";
import "FS.proto";

message RegionState {
  required RegionInfo region_info = 1;
  required State state = 2;
  optional uint64 stamp = 3;
  enum State {
    OFFLINE = 0;       // region is in an offline state
    PENDING_OPEN = 1;  // sent rpc to server to open but has not begun
    OPENING = 2;       // server has begun to open but not yet done
    OPEN = 3;          // server opened region and updated meta
    PENDING_CLOSE = 4; // sent rpc to server to close but has not begun
    CLOSING = 5;       // server has begun to close but not yet done
    CLOSED = 6;        // server closed region and updated meta
    SPLITTING = 7;     // server started split of a region
    SPLIT = 8;         // server completed split of a region
    FAILED_OPEN = 9;   // failed to open, and won't retry any more
    FAILED_CLOSE = 10; // failed to close, and won't retry any more
    MERGING = 11;      // server started merge a region
    MERGED = 12;       // server completed merge of a region
    SPLITTING_NEW = 13;  // new region to be created when RS splits a parent
                       // region but hasn't be created yet, or master doesn't
                       // know it's already created
    MERGING_NEW = 14;  // new region to be created when RS merges two
                       // daughter regions but hasn't be created yet, or
                       // master doesn't know it's already created
  }
}

message RegionInTransition {
  required RegionSpecifier spec = 1;
  required RegionState region_state = 2;
}

message FamilyInfo {
  /** family name */
  required string familyname = 1;

  /** total row count */
  required uint64 row_count = 2;

  /** total kv count */
  required uint64 kv_count = 3;

  /** total delete kv count */
  required uint64 del_kv_count = 4;

  /** total del family count */
  required uint64 del_family_count = 5;
}

message RegionLoad {
  /** the region specifier */
  required RegionSpecifier region_specifier = 1;

  /** the number of stores for the region */
  optional uint32 stores = 2;

  /** the number of storefiles for the region */
  optional uint32 storefiles = 3;

  /** the total size of the store files for the region, uncompressed, in MB */
  optional uint32 store_uncompressed_size_MB = 4;

  /** the current total size of the store files for the region, in MB */
  optional uint32 storefile_size_MB = 5;

  /** the current size of the memstore for the region, in MB */
  optional uint32 memstore_size_MB = 6;

  /**
   * The current total size of root-level store file indexes for the region,
   * in MB. The same as {@link #rootIndexSizeKB} but in MB.
   */
  optional uint32 storefile_index_size_MB = 7;

  /** the current total read requests made to region */
  optional uint64 read_requests_count = 8;

  /** the current total write requests made to region */
  optional uint64 write_requests_count = 9;

  /** the total compacting key values in currently running compaction */
  optional uint64 total_compacting_KVs = 10;

  /** the completed count of key values in currently running compaction */
  optional uint64 current_compacted_KVs = 11;

   /** The current total size of root-level indexes for the region, in KB. */
  optional uint32 root_index_size_KB = 12;

  /** The total size of all index blocks, not just the root level, in KB. */
  optional uint32 total_static_index_size_KB = 13;

  /**
   * The total size of all Bloom filter blocks, not just loaded into the
   * block cache, in KB.
   */
  optional uint32 total_static_bloom_size_KB = 14;

  /** the most recent sequence Id from cache flush */
  optional uint64 complete_sequence_id = 15;

  /** The current data locality for region in the regionserver */
  optional float data_locality = 16;
  
  /** read requests per second made to region */
  optional uint64 read_requests_per_second = 17;

  /** write requests per second made to region */
  optional uint64 write_requests_per_second = 18;

  /** the current read capacity unit count per second made to region */
  optional uint64 read_requests_by_capacity_unit_per_second = 19;

  /** the current write capacity unit count per second made to region */
  optional uint64 write_requests_by_capacity_unit_per_second = 20;

  /** throttled read requests made to region */
  optional uint64 throttled_read_requests_count = 21;

  /** throttled write requests made to region */
  optional uint64 throttled_write_requests_count = 22;

  /** the current total get requests made to region */
  optional uint64 get_requests_count = 23;

  /** cell read per second made to region */
  optional uint64 read_cell_count_per_second = 24;

  /** raw cell read per second made to region */
  optional uint64 read_raw_cell_count_per_second = 25;

  /** scan count per second made to region */
  optional uint64 scan_count_per_second = 26;

  /** scan rows per second made to region */
  optional uint64 scan_rows_per_second = 27;

  /** family info */
  repeated FamilyInfo family_info = 28;

  /** read requests per second made to region by user */
  optional uint64 user_read_requests_per_second = 29;

  /** write requests per second made to region by user */
  optional uint64 user_write_requests_per_second = 30;

  /** the current read capacity unit count per second made to region by user */
  optional uint64 user_read_requests_by_capacity_unit_per_second = 31;

  /** the current write capacity unit count per second made to region by user */
  optional uint64 user_write_requests_by_capacity_unit_per_second = 32;
}

/* Server-level protobufs */

message ReplicationLoadSink {
  required uint64 ageOfLastAppliedOp = 1;
  required uint64 timeStampsOfLastAppliedOp = 2;
}

message ReplicationLoadSource {
  required string peerID = 1;
  required uint64 ageOfLastShippedOp = 2;
  required uint32 sizeOfLogQueue = 3;
  required uint64 timeStampOfLastShippedOp = 4;
  required uint64 replicationLag = 5;
}

message ServerLoad {
  /** Number of requests since last report. */
  optional uint32 number_of_requests = 1;

  /** Total Number of requests from the start of the region server. */
  optional uint32 total_number_of_requests = 2;

  /** the amount of used heap, in MB. */
  optional uint32 used_heap_MB = 3;

  /** the maximum allowable size of the heap, in MB. */
  optional uint32 max_heap_MB = 4;

  /** Information on the load of individual regions. */
  repeated RegionLoad region_loads = 5;

  /**
   * Regionserver-level coprocessors, e.g., WALObserver implementations.
   * Region-level coprocessors, on the other hand, are stored inside RegionLoad
   * objects.
   */
  repeated Coprocessor coprocessors = 6;

  /**
   * Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
   * time is measured as the difference, measured in milliseconds, between the current time
   * and midnight, January 1, 1970 UTC.
   */
  optional uint64 report_start_time = 7;

  /**
   * Time when report was generated.
   * time is measured as the difference, measured in milliseconds, between the current time
   * and midnight, January 1, 1970 UTC.
   */
  optional uint64 report_end_time = 8;

  /**
   * The port number that this region server is hosing an info server on.
   */
  optional uint32 info_server_port = 9;

  /**
   * The replicationLoadSource for the replication Source status of this region server.
   */
  repeated ReplicationLoadSource replLoadSource = 10;

  /**
   * The replicationLoadSink for the replication Sink status of this region server.
   */
  optional ReplicationLoadSink replLoadSink = 11;
  
  /** read requests per second made to region */
  optional uint64 read_requests_per_second = 12;

  /** write requests per second made to region */
  optional uint64 write_requests_per_second = 13;

  /** cell read per second made to region */
  optional uint64 read_cell_count_per_second = 14;

  /** raw cell read per second made to region */
  optional uint64 read_raw_cell_count_per_second = 15;

  optional uint64 scan_count_per_second = 16;
  optional uint64 scan_rows_per_second = 17;
  repeated RegionServerTableLatency region_server_table_latency = 18;
}

message RegionServerTableLatency {
  required string table_name = 1;
  optional uint64 get_time_mean = 2;
  optional uint64 put_time_mean = 3;
  optional uint64 scan_time_mean = 4;
  optional uint64 batch_time_mean = 5;
  optional uint64 append_time_mean = 6;
  optional uint64 delete_time_mean = 7;
  optional uint64 increment_time_mean = 8;
  optional uint64 get_operation_count = 9;
  optional uint64 put_operation_count = 10;
  optional uint64 scan_operation_count = 11;
  optional uint64 batch_operation_count = 12;
  optional uint64 append_operation_count = 13;
  optional uint64 delete_operation_count = 14;
  optional uint64 increment_operation_count = 15;
  optional uint64 get_time_99_percentile = 16;
  optional uint64 put_time_99_percentile = 17;
  optional uint64 scan_time_99_percentile = 18;
  optional uint64 batch_time_99_percentile = 19;
}

message LiveServerInfo {
  required ServerName server = 1;
  required ServerLoad server_load = 2;
}

message ClusterStatus {
  optional HBaseVersionFileContent hbase_version = 1;
  repeated LiveServerInfo live_servers = 2;
  repeated ServerName dead_servers = 3;
  repeated RegionInTransition regions_in_transition = 4;
  optional ClusterId cluster_id = 5;
  repeated Coprocessor master_coprocessors = 6;
  optional ServerName master = 7;
  repeated ServerName backup_masters = 8;
  optional bool balancer_on = 9;
  repeated ServerName servers_name = 10;
}

enum Option {
  HBASE_VERSION = 0;
  CLUSTER_ID = 1;
  LIVE_SERVERS = 2;
  DEAD_SERVERS = 3;
  MASTER = 4;
  BACKUP_MASTERS = 5;
  MASTER_COPROCESSORS = 6;
  REGIONS_IN_TRANSITION = 7;
  BALANCER_ON = 8;
  MASTER_INFO_PORT = 9;
  SERVERS_NAME = 10;
}
