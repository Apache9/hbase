/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hbase.replication.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Mapping for HLogKey
 * 
 */
public class THLogKey implements org.apache.thrift.TBase<THLogKey, THLogKey._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THLogKey");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WRITE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("writeTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SEQ_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("seqNum", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THLogKeyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THLogKeyTupleSchemeFactory());
  }

  public ByteBuffer tableName; // required
  public long writeTime; // required
  public long seqNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    WRITE_TIME((short)2, "writeTime"),
    SEQ_NUM((short)3, "seqNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // WRITE_TIME
          return WRITE_TIME;
        case 3: // SEQ_NUM
          return SEQ_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WRITETIME_ISSET_ID = 0;
  private static final int __SEQNUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.WRITE_TIME, new org.apache.thrift.meta_data.FieldMetaData("writeTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEQ_NUM, new org.apache.thrift.meta_data.FieldMetaData("seqNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THLogKey.class, metaDataMap);
  }

  public THLogKey() {
  }

  public THLogKey(
    ByteBuffer tableName,
    long writeTime,
    long seqNum)
  {
    this();
    this.tableName = tableName;
    this.writeTime = writeTime;
    setWriteTimeIsSet(true);
    this.seqNum = seqNum;
    setSeqNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THLogKey(THLogKey other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableName()) {
      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(other.tableName);
;
    }
    this.writeTime = other.writeTime;
    this.seqNum = other.seqNum;
  }

  public THLogKey deepCopy() {
    return new THLogKey(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    setWriteTimeIsSet(false);
    this.writeTime = 0;
    setSeqNumIsSet(false);
    this.seqNum = 0;
  }

  public byte[] getTableName() {
    setTableName(org.apache.thrift.TBaseHelper.rightSize(tableName));
    return tableName == null ? null : tableName.array();
  }

  public ByteBuffer bufferForTableName() {
    return tableName;
  }

  public THLogKey setTableName(byte[] tableName) {
    setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
    return this;
  }

  public THLogKey setTableName(ByteBuffer tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public long getWriteTime() {
    return this.writeTime;
  }

  public THLogKey setWriteTime(long writeTime) {
    this.writeTime = writeTime;
    setWriteTimeIsSet(true);
    return this;
  }

  public void unsetWriteTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITETIME_ISSET_ID);
  }

  /** Returns true if field writeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteTime() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITETIME_ISSET_ID);
  }

  public void setWriteTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITETIME_ISSET_ID, value);
  }

  public long getSeqNum() {
    return this.seqNum;
  }

  public THLogKey setSeqNum(long seqNum) {
    this.seqNum = seqNum;
    setSeqNumIsSet(true);
    return this;
  }

  public void unsetSeqNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQNUM_ISSET_ID);
  }

  /** Returns true if field seqNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQNUM_ISSET_ID);
  }

  public void setSeqNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((ByteBuffer)value);
      }
      break;

    case WRITE_TIME:
      if (value == null) {
        unsetWriteTime();
      } else {
        setWriteTime((Long)value);
      }
      break;

    case SEQ_NUM:
      if (value == null) {
        unsetSeqNum();
      } else {
        setSeqNum((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case WRITE_TIME:
      return Long.valueOf(getWriteTime());

    case SEQ_NUM:
      return Long.valueOf(getSeqNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case WRITE_TIME:
      return isSetWriteTime();
    case SEQ_NUM:
      return isSetSeqNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THLogKey)
      return this.equals((THLogKey)that);
    return false;
  }

  public boolean equals(THLogKey that) {
    if (that == null)
      return false;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_writeTime = true;
    boolean that_present_writeTime = true;
    if (this_present_writeTime || that_present_writeTime) {
      if (!(this_present_writeTime && that_present_writeTime))
        return false;
      if (this.writeTime != that.writeTime)
        return false;
    }

    boolean this_present_seqNum = true;
    boolean that_present_seqNum = true;
    if (this_present_seqNum || that_present_seqNum) {
      if (!(this_present_seqNum && that_present_seqNum))
        return false;
      if (this.seqNum != that.seqNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(THLogKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    THLogKey typedOther = (THLogKey)other;

    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriteTime()).compareTo(typedOther.isSetWriteTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeTime, typedOther.writeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeqNum()).compareTo(typedOther.isSetSeqNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqNum, typedOther.seqNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THLogKey(");
    boolean first = true;

    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("writeTime:");
    sb.append(this.writeTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seqNum:");
    sb.append(this.seqNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'writeTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'seqNum' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THLogKeyStandardSchemeFactory implements SchemeFactory {
    public THLogKeyStandardScheme getScheme() {
      return new THLogKeyStandardScheme();
    }
  }

  private static class THLogKeyStandardScheme extends StandardScheme<THLogKey> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THLogKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readBinary();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WRITE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.writeTime = iprot.readI64();
              struct.setWriteTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEQ_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seqNum = iprot.readI64();
              struct.setSeqNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetWriteTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'writeTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSeqNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'seqNum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THLogKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeBinary(struct.tableName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WRITE_TIME_FIELD_DESC);
      oprot.writeI64(struct.writeTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEQ_NUM_FIELD_DESC);
      oprot.writeI64(struct.seqNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THLogKeyTupleSchemeFactory implements SchemeFactory {
    public THLogKeyTupleScheme getScheme() {
      return new THLogKeyTupleScheme();
    }
  }

  private static class THLogKeyTupleScheme extends TupleScheme<THLogKey> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THLogKey struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBinary(struct.tableName);
      oprot.writeI64(struct.writeTime);
      oprot.writeI64(struct.seqNum);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THLogKey struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tableName = iprot.readBinary();
      struct.setTableNameIsSet(true);
      struct.writeTime = iprot.readI64();
      struct.setWriteTimeIsSet(true);
      struct.seqNum = iprot.readI64();
      struct.setSeqNumIsSet(true);
    }
  }

}

