/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hbase.thrift2.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Thrift wrapper around
 * org.apache.hadoop.hbase.NamespaceDescriptor
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-05")
public class TNamespaceDescriptor implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<TNamespaceDescriptor, TNamespaceDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TNamespaceDescriptor> {
  private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("TNamespaceDescriptor");

  private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField NAME_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("name", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("configuration", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNamespaceDescriptorStandardSchemeFactory();
  private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNamespaceDescriptorTupleSchemeFactory();

  public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> configuration; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    CONFIGURATION((short)2, "configuration");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // CONFIGURATION
          return CONFIGURATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CONFIGURATION};
  public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("name", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIGURATION, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("configuration", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.MapMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.MAP, 
            new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING), 
            new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNamespaceDescriptor.class, metaDataMap);
  }

  public TNamespaceDescriptor() {
  }

  public TNamespaceDescriptor(
    java.lang.String name)
  {
    this();
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNamespaceDescriptor(TNamespaceDescriptor other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetConfiguration()) {
      java.util.Map<java.lang.String,java.lang.String> __this__configuration = new java.util.HashMap<java.lang.String,java.lang.String>(other.configuration);
      this.configuration = __this__configuration;
    }
  }

  public TNamespaceDescriptor deepCopy() {
    return new TNamespaceDescriptor(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.configuration = null;
  }

  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TNamespaceDescriptor setName(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getConfigurationSize() {
    return (this.configuration == null) ? 0 : this.configuration.size();
  }

  public void putToConfiguration(java.lang.String key, java.lang.String val) {
    if (this.configuration == null) {
      this.configuration = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.configuration.put(key, val);
  }

  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getConfiguration() {
    return this.configuration;
  }

  public TNamespaceDescriptor setConfiguration(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> configuration) {
    this.configuration = configuration;
    return this;
  }

  public void unsetConfiguration() {
    this.configuration = null;
  }

  /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
  public boolean isSetConfiguration() {
    return this.configuration != null;
  }

  public void setConfigurationIsSet(boolean value) {
    if (!value) {
      this.configuration = null;
    }
  }

  public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case CONFIGURATION:
      if (value == null) {
        unsetConfiguration();
      } else {
        setConfiguration((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case CONFIGURATION:
      return getConfiguration();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case CONFIGURATION:
      return isSetConfiguration();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TNamespaceDescriptor)
      return this.equals((TNamespaceDescriptor)that);
    return false;
  }

  public boolean equals(TNamespaceDescriptor that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_configuration = true && this.isSetConfiguration();
    boolean that_present_configuration = true && that.isSetConfiguration();
    if (this_present_configuration || that_present_configuration) {
      if (!(this_present_configuration && that_present_configuration))
        return false;
      if (!this.configuration.equals(that.configuration))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfiguration()) ? 131071 : 524287);
    if (isSetConfiguration())
      hashCode = hashCode * 8191 + configuration.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TNamespaceDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfiguration()) {
      lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNamespaceDescriptor(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetConfiguration()) {
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNamespaceDescriptorStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
    public TNamespaceDescriptorStandardScheme getScheme() {
      return new TNamespaceDescriptorStandardScheme();
    }
  }

  private static class TNamespaceDescriptorStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<TNamespaceDescriptor> {

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, TNamespaceDescriptor struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONFIGURATION
            if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.MAP) {
              {
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMap _map180 = iprot.readMapBegin();
                struct.configuration = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map180.size);
                @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.String _key181;
                @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.String _val182;
                for (int _i183 = 0; _i183 < _map180.size; ++_i183)
                {
                  _key181 = iprot.readString();
                  _val182 = iprot.readString();
                  struct.configuration.put(_key181, _val182);
                }
                iprot.readMapEnd();
              }
              struct.setConfigurationIsSet(true);
            } else { 
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, TNamespaceDescriptor struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.configuration != null) {
        if (struct.isSetConfiguration()) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          {
            oprot.writeMapBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMap(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, struct.configuration.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter184 : struct.configuration.entrySet())
            {
              oprot.writeString(_iter184.getKey());
              oprot.writeString(_iter184.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNamespaceDescriptorTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
    public TNamespaceDescriptorTupleScheme getScheme() {
      return new TNamespaceDescriptorTupleScheme();
    }
  }

  private static class TNamespaceDescriptorTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<TNamespaceDescriptor> {

    @Override
    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, TNamespaceDescriptor struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConfiguration()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetConfiguration()) {
        {
          oprot.writeI32(struct.configuration.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter185 : struct.configuration.entrySet())
          {
            oprot.writeString(_iter185.getKey());
            oprot.writeString(_iter185.getValue());
          }
        }
      }
    }

    @Override
    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, TNamespaceDescriptor struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMap _map186 = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMap(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.configuration = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map186.size);
          @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.String _key187;
          @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.String _val188;
          for (int _i189 = 0; _i189 < _map186.size; ++_i189)
          {
            _key187 = iprot.readString();
            _val188 = iprot.readString();
            struct.configuration.put(_key187, _val188);
          }
        }
        struct.setConfigurationIsSet(true);
      }
    }
  }

  private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
    return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

