/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hbase.thrift2.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-02-13")
public class THBaseService {

  public interface Iface {

    /**
     * Test for the existence of columns in the table, as specified in the TGet.
     * 
     * @return true if the specified TGet matches one or more keys, false if not
     * 
     * @param table the table to check on
     * 
     * @param get the TGet to check for
     */
    public boolean exists(java.nio.ByteBuffer table, TGet get) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Method for getting data from a row.
     * 
     * If the row cannot be found an empty Result is returned.
     * This can be checked by the empty field of the TResult
     * 
     * @return the result
     * 
     * @param table the table to get from
     * 
     * @param get the TGet to fetch
     */
    public TResult get(java.nio.ByteBuffer table, TGet get) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Method for getting multiple rows.
     * 
     * If a row cannot be found there will be a null
     * value in the result list for that TGet at the
     * same position.
     * 
     * So the Results are in the same order as the TGets.
     * 
     * @param table the table to get from
     * 
     * @param gets a list of TGets to fetch, the Result list
     * will have the Results at corresponding positions
     * or null if there was an error
     */
    public java.util.List<TResult> getMultiple(java.nio.ByteBuffer table, java.util.List<TGet> gets) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Commit a TPut to a table.
     * 
     * @param table the table to put data in
     * 
     * @param put the TPut to put
     */
    public void put(java.nio.ByteBuffer table, TPut put) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Atomically checks if a row/family/qualifier value matches the expected
     * value. If it does, it adds the TPut.
     * 
     * @return true if the new put was executed, false otherwise
     * 
     * @param table to check in and put to
     * 
     * @param row row to check
     * 
     * @param family column family to check
     * 
     * @param qualifier column qualifier to check
     * 
     * @param value the expected value, if not provided the
     * check is for the non-existence of the
     * column in question
     * 
     * @param put the TPut to put if the check succeeds
     */
    public boolean checkAndPut(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TPut put) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Commit a List of Puts to the table.
     * 
     * @param table the table to put data in
     * 
     * @param puts a list of TPuts to commit
     */
    public void putMultiple(java.nio.ByteBuffer table, java.util.List<TPut> puts) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Deletes as specified by the TDelete.
     * 
     * Note: "delete" is a reserved keyword and cannot be used in Thrift
     * thus the inconsistent naming scheme from the other functions.
     * 
     * @param table the table to delete from
     * 
     * @param deleteSingle the TDelete to delete
     */
    public void deleteSingle(java.nio.ByteBuffer table, TDelete deleteSingle) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Bulk commit a List of TDeletes to the table.
     * 
     * Throws a TIOError if any of the deletes fail.
     * 
     * Always returns an empty list for backwards compatibility.
     * 
     * @param table the table to delete from
     * 
     * @param deletes list of TDeletes to delete
     */
    public java.util.List<TDelete> deleteMultiple(java.nio.ByteBuffer table, java.util.List<TDelete> deletes) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Atomically checks if a row/family/qualifier value matches the expected
     * value. If it does, it adds the delete.
     * 
     * @return true if the new delete was executed, false otherwise
     * 
     * @param table to check in and delete from
     * 
     * @param row row to check
     * 
     * @param family column family to check
     * 
     * @param qualifier column qualifier to check
     * 
     * @param value the expected value, if not provided the
     * check is for the non-existence of the
     * column in question
     * 
     * @param deleteSingle the TDelete to execute if the check succeeds
     */
    public boolean checkAndDelete(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TDelete deleteSingle) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public TResult increment(java.nio.ByteBuffer table, TIncrement increment) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public TResult append(java.nio.ByteBuffer table, TAppend append) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Get a Scanner for the provided TScan object.
     * 
     * @return Scanner Id to be used with other scanner procedures
     * 
     * @param table the table to get the Scanner for
     * 
     * @param scan the scan object to get a Scanner for
     */
    public int openScanner(java.nio.ByteBuffer table, TScan scan) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Grabs multiple rows from a Scanner.
     * 
     * @return Between zero and numRows TResults
     * 
     * @param scannerId the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
     * 
     * @param numRows number of rows to return
     */
    public java.util.List<TResult> getScannerRows(int scannerId, int numRows) throws TIOError, TIllegalArgument, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Closes the scanner. Should be called to free server side resources timely.
     * Typically close once the scanner is not needed anymore, i.e. after looping
     * over it to get all the required rows.
     * 
     * @param scannerId the Id of the Scanner to close *
     */
    public void closeScanner(int scannerId) throws TIOError, TIllegalArgument, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * mutateRow performs multiple mutations atomically on a single row.
     * 
     * @param table table to apply the mutations
     * 
     * @param rowMutations mutations to apply
     */
    public void mutateRow(java.nio.ByteBuffer table, TRowMutations rowMutations) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    /**
     * Get results for the provided TScan object.
     * This helper function opens a scanner, get the results and close the scanner.
     * 
     * @return between zero and numRows TResults
     * 
     * @param table the table to get the Scanner for
     * 
     * @param scan the scan object to get a Scanner for
     * 
     * @param numRows number of rows to return
     */
    public java.util.List<TResult> getScannerResults(java.nio.ByteBuffer table, TScan scan, int numRows) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void exists(java.nio.ByteBuffer table, TGet get, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void get(java.nio.ByteBuffer table, TGet get, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void getMultiple(java.nio.ByteBuffer table, java.util.List<TGet> gets, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void put(java.nio.ByteBuffer table, TPut put, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void checkAndPut(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TPut put, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void putMultiple(java.nio.ByteBuffer table, java.util.List<TPut> puts, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void deleteSingle(java.nio.ByteBuffer table, TDelete deleteSingle, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void deleteMultiple(java.nio.ByteBuffer table, java.util.List<TDelete> deletes, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TDelete>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void checkAndDelete(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TDelete deleteSingle, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void increment(java.nio.ByteBuffer table, TIncrement increment, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void append(java.nio.ByteBuffer table, TAppend append, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void openScanner(java.nio.ByteBuffer table, TScan scan, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void getScannerRows(int scannerId, int numRows, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void closeScanner(int scannerId, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void mutateRow(java.nio.ByteBuffer table, TRowMutations rowMutations, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

    public void getScannerResults(java.nio.ByteBuffer table, TScan scan, int numRows, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException;

  }

  public static class Client extends com.xiaomi.infra.thirdparty.org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements com.xiaomi.infra.thirdparty.org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean exists(java.nio.ByteBuffer table, TGet get) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_exists(table, get);
      return recv_exists();
    }

    public void send_exists(java.nio.ByteBuffer table, TGet get) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      exists_args args = new exists_args();
      args.setTable(table);
      args.setGet(get);
      sendBase("exists", args);
    }

    public boolean recv_exists() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      exists_result result = new exists_result();
      receiveBase(result, "exists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "exists failed: unknown result");
    }

    public TResult get(java.nio.ByteBuffer table, TGet get) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_get(table, get);
      return recv_get();
    }

    public void send_get(java.nio.ByteBuffer table, TGet get) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      get_args args = new get_args();
      args.setTable(table);
      args.setGet(get);
      sendBase("get", args);
    }

    public TResult recv_get() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      get_result result = new get_result();
      receiveBase(result, "get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "get failed: unknown result");
    }

    public java.util.List<TResult> getMultiple(java.nio.ByteBuffer table, java.util.List<TGet> gets) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_getMultiple(table, gets);
      return recv_getMultiple();
    }

    public void send_getMultiple(java.nio.ByteBuffer table, java.util.List<TGet> gets) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      getMultiple_args args = new getMultiple_args();
      args.setTable(table);
      args.setGets(gets);
      sendBase("getMultiple", args);
    }

    public java.util.List<TResult> recv_getMultiple() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      getMultiple_result result = new getMultiple_result();
      receiveBase(result, "getMultiple");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "getMultiple failed: unknown result");
    }

    public void put(java.nio.ByteBuffer table, TPut put) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_put(table, put);
      recv_put();
    }

    public void send_put(java.nio.ByteBuffer table, TPut put) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      put_args args = new put_args();
      args.setTable(table);
      args.setPut(put);
      sendBase("put", args);
    }

    public void recv_put() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      put_result result = new put_result();
      receiveBase(result, "put");
      if (result.io != null) {
        throw result.io;
      }
      return;
    }

    public boolean checkAndPut(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TPut put) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_checkAndPut(table, row, family, qualifier, value, put);
      return recv_checkAndPut();
    }

    public void send_checkAndPut(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TPut put) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      checkAndPut_args args = new checkAndPut_args();
      args.setTable(table);
      args.setRow(row);
      args.setFamily(family);
      args.setQualifier(qualifier);
      args.setValue(value);
      args.setPut(put);
      sendBase("checkAndPut", args);
    }

    public boolean recv_checkAndPut() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      checkAndPut_result result = new checkAndPut_result();
      receiveBase(result, "checkAndPut");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "checkAndPut failed: unknown result");
    }

    public void putMultiple(java.nio.ByteBuffer table, java.util.List<TPut> puts) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_putMultiple(table, puts);
      recv_putMultiple();
    }

    public void send_putMultiple(java.nio.ByteBuffer table, java.util.List<TPut> puts) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      putMultiple_args args = new putMultiple_args();
      args.setTable(table);
      args.setPuts(puts);
      sendBase("putMultiple", args);
    }

    public void recv_putMultiple() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      putMultiple_result result = new putMultiple_result();
      receiveBase(result, "putMultiple");
      if (result.io != null) {
        throw result.io;
      }
      return;
    }

    public void deleteSingle(java.nio.ByteBuffer table, TDelete deleteSingle) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_deleteSingle(table, deleteSingle);
      recv_deleteSingle();
    }

    public void send_deleteSingle(java.nio.ByteBuffer table, TDelete deleteSingle) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      deleteSingle_args args = new deleteSingle_args();
      args.setTable(table);
      args.setDeleteSingle(deleteSingle);
      sendBase("deleteSingle", args);
    }

    public void recv_deleteSingle() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      deleteSingle_result result = new deleteSingle_result();
      receiveBase(result, "deleteSingle");
      if (result.io != null) {
        throw result.io;
      }
      return;
    }

    public java.util.List<TDelete> deleteMultiple(java.nio.ByteBuffer table, java.util.List<TDelete> deletes) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_deleteMultiple(table, deletes);
      return recv_deleteMultiple();
    }

    public void send_deleteMultiple(java.nio.ByteBuffer table, java.util.List<TDelete> deletes) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      deleteMultiple_args args = new deleteMultiple_args();
      args.setTable(table);
      args.setDeletes(deletes);
      sendBase("deleteMultiple", args);
    }

    public java.util.List<TDelete> recv_deleteMultiple() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      deleteMultiple_result result = new deleteMultiple_result();
      receiveBase(result, "deleteMultiple");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteMultiple failed: unknown result");
    }

    public boolean checkAndDelete(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TDelete deleteSingle) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_checkAndDelete(table, row, family, qualifier, value, deleteSingle);
      return recv_checkAndDelete();
    }

    public void send_checkAndDelete(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TDelete deleteSingle) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      checkAndDelete_args args = new checkAndDelete_args();
      args.setTable(table);
      args.setRow(row);
      args.setFamily(family);
      args.setQualifier(qualifier);
      args.setValue(value);
      args.setDeleteSingle(deleteSingle);
      sendBase("checkAndDelete", args);
    }

    public boolean recv_checkAndDelete() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      checkAndDelete_result result = new checkAndDelete_result();
      receiveBase(result, "checkAndDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "checkAndDelete failed: unknown result");
    }

    public TResult increment(java.nio.ByteBuffer table, TIncrement increment) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_increment(table, increment);
      return recv_increment();
    }

    public void send_increment(java.nio.ByteBuffer table, TIncrement increment) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      increment_args args = new increment_args();
      args.setTable(table);
      args.setIncrement(increment);
      sendBase("increment", args);
    }

    public TResult recv_increment() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      increment_result result = new increment_result();
      receiveBase(result, "increment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "increment failed: unknown result");
    }

    public TResult append(java.nio.ByteBuffer table, TAppend append) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_append(table, append);
      return recv_append();
    }

    public void send_append(java.nio.ByteBuffer table, TAppend append) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      append_args args = new append_args();
      args.setTable(table);
      args.setAppend(append);
      sendBase("append", args);
    }

    public TResult recv_append() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      append_result result = new append_result();
      receiveBase(result, "append");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "append failed: unknown result");
    }

    public int openScanner(java.nio.ByteBuffer table, TScan scan) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_openScanner(table, scan);
      return recv_openScanner();
    }

    public void send_openScanner(java.nio.ByteBuffer table, TScan scan) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      openScanner_args args = new openScanner_args();
      args.setTable(table);
      args.setScan(scan);
      sendBase("openScanner", args);
    }

    public int recv_openScanner() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      openScanner_result result = new openScanner_result();
      receiveBase(result, "openScanner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "openScanner failed: unknown result");
    }

    public java.util.List<TResult> getScannerRows(int scannerId, int numRows) throws TIOError, TIllegalArgument, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_getScannerRows(scannerId, numRows);
      return recv_getScannerRows();
    }

    public void send_getScannerRows(int scannerId, int numRows) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      getScannerRows_args args = new getScannerRows_args();
      args.setScannerId(scannerId);
      args.setNumRows(numRows);
      sendBase("getScannerRows", args);
    }

    public java.util.List<TResult> recv_getScannerRows() throws TIOError, TIllegalArgument, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      getScannerRows_result result = new getScannerRows_result();
      receiveBase(result, "getScannerRows");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      if (result.ia != null) {
        throw result.ia;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "getScannerRows failed: unknown result");
    }

    public void closeScanner(int scannerId) throws TIOError, TIllegalArgument, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_closeScanner(scannerId);
      recv_closeScanner();
    }

    public void send_closeScanner(int scannerId) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      closeScanner_args args = new closeScanner_args();
      args.setScannerId(scannerId);
      sendBase("closeScanner", args);
    }

    public void recv_closeScanner() throws TIOError, TIllegalArgument, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      closeScanner_result result = new closeScanner_result();
      receiveBase(result, "closeScanner");
      if (result.io != null) {
        throw result.io;
      }
      if (result.ia != null) {
        throw result.ia;
      }
      return;
    }

    public void mutateRow(java.nio.ByteBuffer table, TRowMutations rowMutations) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_mutateRow(table, rowMutations);
      recv_mutateRow();
    }

    public void send_mutateRow(java.nio.ByteBuffer table, TRowMutations rowMutations) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      mutateRow_args args = new mutateRow_args();
      args.setTable(table);
      args.setRowMutations(rowMutations);
      sendBase("mutateRow", args);
    }

    public void recv_mutateRow() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      mutateRow_result result = new mutateRow_result();
      receiveBase(result, "mutateRow");
      if (result.io != null) {
        throw result.io;
      }
      return;
    }

    public java.util.List<TResult> getScannerResults(java.nio.ByteBuffer table, TScan scan, int numRows) throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      send_getScannerResults(table, scan, numRows);
      return recv_getScannerResults();
    }

    public void send_getScannerResults(java.nio.ByteBuffer table, TScan scan, int numRows) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      getScannerResults_args args = new getScannerResults_args();
      args.setTable(table);
      args.setScan(scan);
      args.setNumRows(numRows);
      sendBase("getScannerResults", args);
    }

    public java.util.List<TResult> recv_getScannerResults() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException
    {
      getScannerResults_result result = new getScannerResults_result();
      receiveBase(result, "getScannerResults");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.io != null) {
        throw result.io;
      }
      throw new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.MISSING_RESULT, "getScannerResults failed: unknown result");
    }

  }
  public static class AsyncClient extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClientManager clientManager;
      private com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClientManager clientManager, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClientManager clientManager, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void exists(java.nio.ByteBuffer table, TGet get, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      exists_call method_call = new exists_call(table, get, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exists_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.nio.ByteBuffer table;
      private TGet get;
      public exists_call(java.nio.ByteBuffer table, TGet get, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.get = get;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("exists", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        exists_args args = new exists_args();
        args.setTable(table);
        args.setGet(get);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exists();
      }
    }

    public void get(java.nio.ByteBuffer table, TGet get, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      get_call method_call = new get_call(table, get, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<TResult> {
      private java.nio.ByteBuffer table;
      private TGet get;
      public get_call(java.nio.ByteBuffer table, TGet get, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.get = get;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("get", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_args args = new get_args();
        args.setTable(table);
        args.setGet(get);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResult getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get();
      }
    }

    public void getMultiple(java.nio.ByteBuffer table, java.util.List<TGet> gets, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      getMultiple_call method_call = new getMultiple_call(table, gets, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMultiple_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<java.util.List<TResult>> {
      private java.nio.ByteBuffer table;
      private java.util.List<TGet> gets;
      public getMultiple_call(java.nio.ByteBuffer table, java.util.List<TGet> gets, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.gets = gets;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("getMultiple", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMultiple_args args = new getMultiple_args();
        args.setTable(table);
        args.setGets(gets);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TResult> getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMultiple();
      }
    }

    public void put(java.nio.ByteBuffer table, TPut put, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      put_call method_call = new put_call(table, put, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class put_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.nio.ByteBuffer table;
      private TPut put;
      public put_call(java.nio.ByteBuffer table, TPut put, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.put = put;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("put", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        put_args args = new put_args();
        args.setTable(table);
        args.setPut(put);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void checkAndPut(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TPut put, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      checkAndPut_call method_call = new checkAndPut_call(table, row, family, qualifier, value, put, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkAndPut_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.nio.ByteBuffer table;
      private java.nio.ByteBuffer row;
      private java.nio.ByteBuffer family;
      private java.nio.ByteBuffer qualifier;
      private java.nio.ByteBuffer value;
      private TPut put;
      public checkAndPut_call(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TPut put, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.row = row;
        this.family = family;
        this.qualifier = qualifier;
        this.value = value;
        this.put = put;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("checkAndPut", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkAndPut_args args = new checkAndPut_args();
        args.setTable(table);
        args.setRow(row);
        args.setFamily(family);
        args.setQualifier(qualifier);
        args.setValue(value);
        args.setPut(put);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkAndPut();
      }
    }

    public void putMultiple(java.nio.ByteBuffer table, java.util.List<TPut> puts, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      putMultiple_call method_call = new putMultiple_call(table, puts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putMultiple_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.nio.ByteBuffer table;
      private java.util.List<TPut> puts;
      public putMultiple_call(java.nio.ByteBuffer table, java.util.List<TPut> puts, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.puts = puts;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("putMultiple", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        putMultiple_args args = new putMultiple_args();
        args.setTable(table);
        args.setPuts(puts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deleteSingle(java.nio.ByteBuffer table, TDelete deleteSingle, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      deleteSingle_call method_call = new deleteSingle_call(table, deleteSingle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSingle_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.nio.ByteBuffer table;
      private TDelete deleteSingle;
      public deleteSingle_call(java.nio.ByteBuffer table, TDelete deleteSingle, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.deleteSingle = deleteSingle;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("deleteSingle", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSingle_args args = new deleteSingle_args();
        args.setTable(table);
        args.setDeleteSingle(deleteSingle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deleteMultiple(java.nio.ByteBuffer table, java.util.List<TDelete> deletes, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TDelete>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      deleteMultiple_call method_call = new deleteMultiple_call(table, deletes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteMultiple_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<java.util.List<TDelete>> {
      private java.nio.ByteBuffer table;
      private java.util.List<TDelete> deletes;
      public deleteMultiple_call(java.nio.ByteBuffer table, java.util.List<TDelete> deletes, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TDelete>> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.deletes = deletes;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("deleteMultiple", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteMultiple_args args = new deleteMultiple_args();
        args.setTable(table);
        args.setDeletes(deletes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TDelete> getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteMultiple();
      }
    }

    public void checkAndDelete(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TDelete deleteSingle, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      checkAndDelete_call method_call = new checkAndDelete_call(table, row, family, qualifier, value, deleteSingle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkAndDelete_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.nio.ByteBuffer table;
      private java.nio.ByteBuffer row;
      private java.nio.ByteBuffer family;
      private java.nio.ByteBuffer qualifier;
      private java.nio.ByteBuffer value;
      private TDelete deleteSingle;
      public checkAndDelete_call(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, TDelete deleteSingle, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.row = row;
        this.family = family;
        this.qualifier = qualifier;
        this.value = value;
        this.deleteSingle = deleteSingle;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("checkAndDelete", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkAndDelete_args args = new checkAndDelete_args();
        args.setTable(table);
        args.setRow(row);
        args.setFamily(family);
        args.setQualifier(qualifier);
        args.setValue(value);
        args.setDeleteSingle(deleteSingle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkAndDelete();
      }
    }

    public void increment(java.nio.ByteBuffer table, TIncrement increment, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      increment_call method_call = new increment_call(table, increment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class increment_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<TResult> {
      private java.nio.ByteBuffer table;
      private TIncrement increment;
      public increment_call(java.nio.ByteBuffer table, TIncrement increment, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.increment = increment;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("increment", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        increment_args args = new increment_args();
        args.setTable(table);
        args.setIncrement(increment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResult getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_increment();
      }
    }

    public void append(java.nio.ByteBuffer table, TAppend append, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      append_call method_call = new append_call(table, append, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class append_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<TResult> {
      private java.nio.ByteBuffer table;
      private TAppend append;
      public append_call(java.nio.ByteBuffer table, TAppend append, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.append = append;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("append", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        append_args args = new append_args();
        args.setTable(table);
        args.setAppend(append);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResult getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_append();
      }
    }

    public void openScanner(java.nio.ByteBuffer table, TScan scan, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      openScanner_call method_call = new openScanner_call(table, scan, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openScanner_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.nio.ByteBuffer table;
      private TScan scan;
      public openScanner_call(java.nio.ByteBuffer table, TScan scan, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.scan = scan;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("openScanner", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        openScanner_args args = new openScanner_args();
        args.setTable(table);
        args.setScan(scan);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openScanner();
      }
    }

    public void getScannerRows(int scannerId, int numRows, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      getScannerRows_call method_call = new getScannerRows_call(scannerId, numRows, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getScannerRows_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<java.util.List<TResult>> {
      private int scannerId;
      private int numRows;
      public getScannerRows_call(int scannerId, int numRows, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scannerId = scannerId;
        this.numRows = numRows;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("getScannerRows", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        getScannerRows_args args = new getScannerRows_args();
        args.setScannerId(scannerId);
        args.setNumRows(numRows);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TResult> getResult() throws TIOError, TIllegalArgument, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getScannerRows();
      }
    }

    public void closeScanner(int scannerId, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      closeScanner_call method_call = new closeScanner_call(scannerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeScanner_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int scannerId;
      public closeScanner_call(int scannerId, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scannerId = scannerId;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("closeScanner", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeScanner_args args = new closeScanner_args();
        args.setScannerId(scannerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TIOError, TIllegalArgument, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void mutateRow(java.nio.ByteBuffer table, TRowMutations rowMutations, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      mutateRow_call method_call = new mutateRow_call(table, rowMutations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutateRow_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.nio.ByteBuffer table;
      private TRowMutations rowMutations;
      public mutateRow_call(java.nio.ByteBuffer table, TRowMutations rowMutations, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.rowMutations = rowMutations;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("mutateRow", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        mutateRow_args args = new mutateRow_args();
        args.setTable(table);
        args.setRowMutations(rowMutations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getScannerResults(java.nio.ByteBuffer table, TScan scan, int numRows, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      checkReady();
      getScannerResults_call method_call = new getScannerResults_call(table, scan, numRows, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getScannerResults_call extends com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall<java.util.List<TResult>> {
      private java.nio.ByteBuffer table;
      private TScan scan;
      private int numRows;
      public getScannerResults_call(java.nio.ByteBuffer table, TScan scan, int numRows, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler, com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncClient client, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.scan = scan;
        this.numRows = numRows;
      }

      public void write_args(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessage("getScannerResults", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.CALL, 0));
        getScannerResults_args args = new getScannerResults_args();
        args.setTable(table);
        args.setScan(scan);
        args.setNumRows(numRows);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TResult> getResult() throws TIOError, com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        if (getState() != com.xiaomi.infra.thirdparty.org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getScannerResults();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseProcessor<I> implements com.xiaomi.infra.thirdparty.org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, ? extends com.xiaomi.infra.thirdparty.org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, ? extends com.xiaomi.infra.thirdparty.org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, ? extends com.xiaomi.infra.thirdparty.org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, ? extends  com.xiaomi.infra.thirdparty.org.apache.thrift.TBase>> processMap) {
      processMap.put("exists", new exists());
      processMap.put("get", new get());
      processMap.put("getMultiple", new getMultiple());
      processMap.put("put", new put());
      processMap.put("checkAndPut", new checkAndPut());
      processMap.put("putMultiple", new putMultiple());
      processMap.put("deleteSingle", new deleteSingle());
      processMap.put("deleteMultiple", new deleteMultiple());
      processMap.put("checkAndDelete", new checkAndDelete());
      processMap.put("increment", new increment());
      processMap.put("append", new append());
      processMap.put("openScanner", new openScanner());
      processMap.put("getScannerRows", new getScannerRows());
      processMap.put("closeScanner", new closeScanner());
      processMap.put("mutateRow", new mutateRow());
      processMap.put("getScannerResults", new getScannerResults());
      return processMap;
    }

    public static class exists<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, exists_args> {
      public exists() {
        super("exists");
      }

      public exists_args getEmptyArgsInstance() {
        return new exists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public exists_result getResult(I iface, exists_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        exists_result result = new exists_result();
        try {
          result.success = iface.exists(args.table, args.get);
          result.setSuccessIsSet(true);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class get<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, get_args> {
      public get() {
        super("get");
      }

      public get_args getEmptyArgsInstance() {
        return new get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public get_result getResult(I iface, get_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        get_result result = new get_result();
        try {
          result.success = iface.get(args.table, args.get);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class getMultiple<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, getMultiple_args> {
      public getMultiple() {
        super("getMultiple");
      }

      public getMultiple_args getEmptyArgsInstance() {
        return new getMultiple_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getMultiple_result getResult(I iface, getMultiple_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        getMultiple_result result = new getMultiple_result();
        try {
          result.success = iface.getMultiple(args.table, args.gets);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class put<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, put_args> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public put_result getResult(I iface, put_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        put_result result = new put_result();
        try {
          iface.put(args.table, args.put);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class checkAndPut<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, checkAndPut_args> {
      public checkAndPut() {
        super("checkAndPut");
      }

      public checkAndPut_args getEmptyArgsInstance() {
        return new checkAndPut_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public checkAndPut_result getResult(I iface, checkAndPut_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        checkAndPut_result result = new checkAndPut_result();
        try {
          result.success = iface.checkAndPut(args.table, args.row, args.family, args.qualifier, args.value, args.put);
          result.setSuccessIsSet(true);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class putMultiple<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, putMultiple_args> {
      public putMultiple() {
        super("putMultiple");
      }

      public putMultiple_args getEmptyArgsInstance() {
        return new putMultiple_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public putMultiple_result getResult(I iface, putMultiple_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        putMultiple_result result = new putMultiple_result();
        try {
          iface.putMultiple(args.table, args.puts);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class deleteSingle<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, deleteSingle_args> {
      public deleteSingle() {
        super("deleteSingle");
      }

      public deleteSingle_args getEmptyArgsInstance() {
        return new deleteSingle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public deleteSingle_result getResult(I iface, deleteSingle_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        deleteSingle_result result = new deleteSingle_result();
        try {
          iface.deleteSingle(args.table, args.deleteSingle);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class deleteMultiple<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, deleteMultiple_args> {
      public deleteMultiple() {
        super("deleteMultiple");
      }

      public deleteMultiple_args getEmptyArgsInstance() {
        return new deleteMultiple_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public deleteMultiple_result getResult(I iface, deleteMultiple_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        deleteMultiple_result result = new deleteMultiple_result();
        try {
          result.success = iface.deleteMultiple(args.table, args.deletes);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class checkAndDelete<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, checkAndDelete_args> {
      public checkAndDelete() {
        super("checkAndDelete");
      }

      public checkAndDelete_args getEmptyArgsInstance() {
        return new checkAndDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public checkAndDelete_result getResult(I iface, checkAndDelete_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        checkAndDelete_result result = new checkAndDelete_result();
        try {
          result.success = iface.checkAndDelete(args.table, args.row, args.family, args.qualifier, args.value, args.deleteSingle);
          result.setSuccessIsSet(true);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class increment<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, increment_args> {
      public increment() {
        super("increment");
      }

      public increment_args getEmptyArgsInstance() {
        return new increment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public increment_result getResult(I iface, increment_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        increment_result result = new increment_result();
        try {
          result.success = iface.increment(args.table, args.increment);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class append<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, append_args> {
      public append() {
        super("append");
      }

      public append_args getEmptyArgsInstance() {
        return new append_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public append_result getResult(I iface, append_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        append_result result = new append_result();
        try {
          result.success = iface.append(args.table, args.append);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class openScanner<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, openScanner_args> {
      public openScanner() {
        super("openScanner");
      }

      public openScanner_args getEmptyArgsInstance() {
        return new openScanner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public openScanner_result getResult(I iface, openScanner_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        openScanner_result result = new openScanner_result();
        try {
          result.success = iface.openScanner(args.table, args.scan);
          result.setSuccessIsSet(true);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class getScannerRows<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, getScannerRows_args> {
      public getScannerRows() {
        super("getScannerRows");
      }

      public getScannerRows_args getEmptyArgsInstance() {
        return new getScannerRows_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getScannerRows_result getResult(I iface, getScannerRows_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        getScannerRows_result result = new getScannerRows_result();
        try {
          result.success = iface.getScannerRows(args.scannerId, args.numRows);
        } catch (TIOError io) {
          result.io = io;
        } catch (TIllegalArgument ia) {
          result.ia = ia;
        }
        return result;
      }
    }

    public static class closeScanner<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, closeScanner_args> {
      public closeScanner() {
        super("closeScanner");
      }

      public closeScanner_args getEmptyArgsInstance() {
        return new closeScanner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public closeScanner_result getResult(I iface, closeScanner_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        closeScanner_result result = new closeScanner_result();
        try {
          iface.closeScanner(args.scannerId);
        } catch (TIOError io) {
          result.io = io;
        } catch (TIllegalArgument ia) {
          result.ia = ia;
        }
        return result;
      }
    }

    public static class mutateRow<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, mutateRow_args> {
      public mutateRow() {
        super("mutateRow");
      }

      public mutateRow_args getEmptyArgsInstance() {
        return new mutateRow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public mutateRow_result getResult(I iface, mutateRow_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        mutateRow_result result = new mutateRow_result();
        try {
          iface.mutateRow(args.table, args.rowMutations);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

    public static class getScannerResults<I extends Iface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.ProcessFunction<I, getScannerResults_args> {
      public getScannerResults() {
        super("getScannerResults");
      }

      public getScannerResults_args getEmptyArgsInstance() {
        return new getScannerResults_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getScannerResults_result getResult(I iface, getScannerResults_args args) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        getScannerResults_result result = new getScannerResults_result();
        try {
          result.success = iface.getScannerResults(args.table, args.scan, args.numRows);
        } catch (TIOError io) {
          result.io = io;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, ? extends com.xiaomi.infra.thirdparty.org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, ? extends  com.xiaomi.infra.thirdparty.org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, ? extends  com.xiaomi.infra.thirdparty.org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, ? extends  com.xiaomi.infra.thirdparty.org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("exists", new exists());
      processMap.put("get", new get());
      processMap.put("getMultiple", new getMultiple());
      processMap.put("put", new put());
      processMap.put("checkAndPut", new checkAndPut());
      processMap.put("putMultiple", new putMultiple());
      processMap.put("deleteSingle", new deleteSingle());
      processMap.put("deleteMultiple", new deleteMultiple());
      processMap.put("checkAndDelete", new checkAndDelete());
      processMap.put("increment", new increment());
      processMap.put("append", new append());
      processMap.put("openScanner", new openScanner());
      processMap.put("getScannerRows", new getScannerRows());
      processMap.put("closeScanner", new closeScanner());
      processMap.put("mutateRow", new mutateRow());
      processMap.put("getScannerResults", new getScannerResults());
      return processMap;
    }

    public static class exists<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, exists_args, java.lang.Boolean> {
      public exists() {
        super("exists");
      }

      public exists_args getEmptyArgsInstance() {
        return new exists_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            exists_result result = new exists_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            exists_result result = new exists_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exists_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.exists(args.table, args.get,resultHandler);
      }
    }

    public static class get<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, get_args, TResult> {
      public get() {
        super("get");
      }

      public get_args getEmptyArgsInstance() {
        return new get_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult>() { 
          public void onComplete(TResult o) {
            get_result result = new get_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            get_result result = new get_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.get(args.table, args.get,resultHandler);
      }
    }

    public static class getMultiple<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, getMultiple_args, java.util.List<TResult>> {
      public getMultiple() {
        super("getMultiple");
      }

      public getMultiple_args getEmptyArgsInstance() {
        return new getMultiple_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>>() { 
          public void onComplete(java.util.List<TResult> o) {
            getMultiple_result result = new getMultiple_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            getMultiple_result result = new getMultiple_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMultiple_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.getMultiple(args.table, args.gets,resultHandler);
      }
    }

    public static class put<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, put_args, Void> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            put_result result = new put_result();
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            put_result result = new put_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, put_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.put(args.table, args.put,resultHandler);
      }
    }

    public static class checkAndPut<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, checkAndPut_args, java.lang.Boolean> {
      public checkAndPut() {
        super("checkAndPut");
      }

      public checkAndPut_args getEmptyArgsInstance() {
        return new checkAndPut_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            checkAndPut_result result = new checkAndPut_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            checkAndPut_result result = new checkAndPut_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkAndPut_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.checkAndPut(args.table, args.row, args.family, args.qualifier, args.value, args.put,resultHandler);
      }
    }

    public static class putMultiple<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, putMultiple_args, Void> {
      public putMultiple() {
        super("putMultiple");
      }

      public putMultiple_args getEmptyArgsInstance() {
        return new putMultiple_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            putMultiple_result result = new putMultiple_result();
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            putMultiple_result result = new putMultiple_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putMultiple_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.putMultiple(args.table, args.puts,resultHandler);
      }
    }

    public static class deleteSingle<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, deleteSingle_args, Void> {
      public deleteSingle() {
        super("deleteSingle");
      }

      public deleteSingle_args getEmptyArgsInstance() {
        return new deleteSingle_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteSingle_result result = new deleteSingle_result();
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            deleteSingle_result result = new deleteSingle_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSingle_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.deleteSingle(args.table, args.deleteSingle,resultHandler);
      }
    }

    public static class deleteMultiple<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, deleteMultiple_args, java.util.List<TDelete>> {
      public deleteMultiple() {
        super("deleteMultiple");
      }

      public deleteMultiple_args getEmptyArgsInstance() {
        return new deleteMultiple_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TDelete>> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TDelete>>() { 
          public void onComplete(java.util.List<TDelete> o) {
            deleteMultiple_result result = new deleteMultiple_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            deleteMultiple_result result = new deleteMultiple_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteMultiple_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TDelete>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.deleteMultiple(args.table, args.deletes,resultHandler);
      }
    }

    public static class checkAndDelete<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, checkAndDelete_args, java.lang.Boolean> {
      public checkAndDelete() {
        super("checkAndDelete");
      }

      public checkAndDelete_args getEmptyArgsInstance() {
        return new checkAndDelete_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            checkAndDelete_result result = new checkAndDelete_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            checkAndDelete_result result = new checkAndDelete_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkAndDelete_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.checkAndDelete(args.table, args.row, args.family, args.qualifier, args.value, args.deleteSingle,resultHandler);
      }
    }

    public static class increment<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, increment_args, TResult> {
      public increment() {
        super("increment");
      }

      public increment_args getEmptyArgsInstance() {
        return new increment_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult>() { 
          public void onComplete(TResult o) {
            increment_result result = new increment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            increment_result result = new increment_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, increment_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.increment(args.table, args.increment,resultHandler);
      }
    }

    public static class append<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, append_args, TResult> {
      public append() {
        super("append");
      }

      public append_args getEmptyArgsInstance() {
        return new append_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult>() { 
          public void onComplete(TResult o) {
            append_result result = new append_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            append_result result = new append_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, append_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.append(args.table, args.append,resultHandler);
      }
    }

    public static class openScanner<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, openScanner_args, java.lang.Integer> {
      public openScanner() {
        super("openScanner");
      }

      public openScanner_args getEmptyArgsInstance() {
        return new openScanner_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            openScanner_result result = new openScanner_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            openScanner_result result = new openScanner_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openScanner_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.openScanner(args.table, args.scan,resultHandler);
      }
    }

    public static class getScannerRows<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, getScannerRows_args, java.util.List<TResult>> {
      public getScannerRows() {
        super("getScannerRows");
      }

      public getScannerRows_args getEmptyArgsInstance() {
        return new getScannerRows_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>>() { 
          public void onComplete(java.util.List<TResult> o) {
            getScannerRows_result result = new getScannerRows_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            getScannerRows_result result = new getScannerRows_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof TIllegalArgument) {
              result.ia = (TIllegalArgument) e;
              result.setIaIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getScannerRows_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.getScannerRows(args.scannerId, args.numRows,resultHandler);
      }
    }

    public static class closeScanner<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, closeScanner_args, Void> {
      public closeScanner() {
        super("closeScanner");
      }

      public closeScanner_args getEmptyArgsInstance() {
        return new closeScanner_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            closeScanner_result result = new closeScanner_result();
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            closeScanner_result result = new closeScanner_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof TIllegalArgument) {
              result.ia = (TIllegalArgument) e;
              result.setIaIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeScanner_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.closeScanner(args.scannerId,resultHandler);
      }
    }

    public static class mutateRow<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, mutateRow_args, Void> {
      public mutateRow() {
        super("mutateRow");
      }

      public mutateRow_args getEmptyArgsInstance() {
        return new mutateRow_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            mutateRow_result result = new mutateRow_result();
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            mutateRow_result result = new mutateRow_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mutateRow_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.mutateRow(args.table, args.rowMutations,resultHandler);
      }
    }

    public static class getScannerResults<I extends AsyncIface> extends com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction<I, getScannerResults_args, java.util.List<TResult>> {
      public getScannerResults() {
        super("getScannerResults");
      }

      public getScannerResults_args getEmptyArgsInstance() {
        return new getScannerResults_args();
      }

      public com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> getResultHandler(final com.xiaomi.infra.thirdparty.org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.thirdparty.org.apache.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>>() { 
          public void onComplete(java.util.List<TResult> o) {
            getScannerResults_result result = new getScannerResults_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.thirdparty.org.apache.thrift.TSerializable msg;
            getScannerResults_result result = new getScannerResults_result();
            if (e instanceof TIOError) {
              result.io = (TIOError) e;
              result.setIoIsSet(true);
              msg = result;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException(com.xiaomi.infra.thirdparty.org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getScannerResults_args args, com.xiaomi.infra.thirdparty.org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        iface.getScannerResults(args.table, args.scan, args.numRows,resultHandler);
      }
    }

  }

  public static class exists_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<exists_args, exists_args._Fields>, java.io.Serializable, Cloneable, Comparable<exists_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("exists_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField GET_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("get", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exists_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exists_argsTupleSchemeFactory();

    /**
     * the table to check on
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * the TGet to check for
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TGet get; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to check on
       */
      TABLE((short)1, "table"),
      /**
       * the TGet to check for
       */
      GET((short)2, "get");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // GET
            return GET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.GET, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("get", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TGet.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exists_args.class, metaDataMap);
    }

    public exists_args() {
    }

    public exists_args(
      java.nio.ByteBuffer table,
      TGet get)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.get = get;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exists_args(exists_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetGet()) {
        this.get = new TGet(other.get);
      }
    }

    public exists_args deepCopy() {
      return new exists_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.get = null;
    }

    /**
     * the table to check on
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to check on
     */
    public exists_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public exists_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the TGet to check for
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TGet getGet() {
      return this.get;
    }

    /**
     * the TGet to check for
     */
    public exists_args setGet(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TGet get) {
      this.get = get;
      return this;
    }

    public void unsetGet() {
      this.get = null;
    }

    /** Returns true if field get is set (has been assigned a value) and false otherwise */
    public boolean isSetGet() {
      return this.get != null;
    }

    public void setGetIsSet(boolean value) {
      if (!value) {
        this.get = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case GET:
        if (value == null) {
          unsetGet();
        } else {
          setGet((TGet)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case GET:
        return getGet();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case GET:
        return isSetGet();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof exists_args)
        return this.equals((exists_args)that);
      return false;
    }

    public boolean equals(exists_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_get = true && this.isSetGet();
      boolean that_present_get = true && that.isSetGet();
      if (this_present_get || that_present_get) {
        if (!(this_present_get && that_present_get))
          return false;
        if (!this.get.equals(that.get))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetGet()) ? 131071 : 524287);
      if (isSetGet())
        hashCode = hashCode * 8191 + get.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(exists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGet()).compareTo(other.isSetGet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGet()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.get, other.get);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exists_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("get:");
      if (this.get == null) {
        sb.append("null");
      } else {
        sb.append(this.get);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (get == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'get' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (get != null) {
        get.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exists_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public exists_argsStandardScheme getScheme() {
        return new exists_argsStandardScheme();
      }
    }

    private static class exists_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<exists_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, exists_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GET
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.get = new TGet();
                struct.get.read(iprot);
                struct.setGetIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, exists_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.get != null) {
          oprot.writeFieldBegin(GET_FIELD_DESC);
          struct.get.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exists_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public exists_argsTupleScheme getScheme() {
        return new exists_argsTupleScheme();
      }
    }

    private static class exists_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<exists_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, exists_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        struct.get.write(oprot);
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, exists_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.get = new TGet();
        struct.get.read(iprot);
        struct.setGetIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class exists_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<exists_result, exists_result._Fields>, java.io.Serializable, Cloneable, Comparable<exists_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("exists_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exists_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exists_resultTupleSchemeFactory();

    public boolean success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exists_result.class, metaDataMap);
    }

    public exists_result() {
    }

    public exists_result(
      boolean success,
      TIOError io)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exists_result(exists_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public exists_result deepCopy() {
      return new exists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.io = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public exists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public exists_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof exists_result)
        return this.equals((exists_result)that);
      return false;
    }

    public boolean equals(exists_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(exists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exists_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public exists_resultStandardScheme getScheme() {
        return new exists_resultStandardScheme();
      }
    }

    private static class exists_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<exists_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, exists_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, exists_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exists_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public exists_resultTupleScheme getScheme() {
        return new exists_resultTupleScheme();
      }
    }

    private static class exists_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<exists_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, exists_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, exists_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class get_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("get_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField GET_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("get", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new get_argsTupleSchemeFactory();

    /**
     * the table to get from
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * the TGet to fetch
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TGet get; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to get from
       */
      TABLE((short)1, "table"),
      /**
       * the TGet to fetch
       */
      GET((short)2, "get");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // GET
            return GET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.GET, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("get", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TGet.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
    }

    public get_args() {
    }

    public get_args(
      java.nio.ByteBuffer table,
      TGet get)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.get = get;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_args(get_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetGet()) {
        this.get = new TGet(other.get);
      }
    }

    public get_args deepCopy() {
      return new get_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.get = null;
    }

    /**
     * the table to get from
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to get from
     */
    public get_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public get_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the TGet to fetch
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TGet getGet() {
      return this.get;
    }

    /**
     * the TGet to fetch
     */
    public get_args setGet(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TGet get) {
      this.get = get;
      return this;
    }

    public void unsetGet() {
      this.get = null;
    }

    /** Returns true if field get is set (has been assigned a value) and false otherwise */
    public boolean isSetGet() {
      return this.get != null;
    }

    public void setGetIsSet(boolean value) {
      if (!value) {
        this.get = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case GET:
        if (value == null) {
          unsetGet();
        } else {
          setGet((TGet)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case GET:
        return getGet();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case GET:
        return isSetGet();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof get_args)
        return this.equals((get_args)that);
      return false;
    }

    public boolean equals(get_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_get = true && this.isSetGet();
      boolean that_present_get = true && that.isSetGet();
      if (this_present_get || that_present_get) {
        if (!(this_present_get && that_present_get))
          return false;
        if (!this.get.equals(that.get))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetGet()) ? 131071 : 524287);
      if (isSetGet())
        hashCode = hashCode * 8191 + get.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGet()).compareTo(other.isSetGet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGet()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.get, other.get);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("get_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("get:");
      if (this.get == null) {
        sb.append("null");
      } else {
        sb.append(this.get);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (get == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'get' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (get != null) {
        get.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public get_argsStandardScheme getScheme() {
        return new get_argsStandardScheme();
      }
    }

    private static class get_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<get_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, get_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GET
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.get = new TGet();
                struct.get.read(iprot);
                struct.setGetIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, get_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.get != null) {
          oprot.writeFieldBegin(GET_FIELD_DESC);
          struct.get.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public get_argsTupleScheme getScheme() {
        return new get_argsTupleScheme();
      }
    }

    private static class get_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<get_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, get_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        struct.get.write(oprot);
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, get_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.get = new TGet();
        struct.get.read(iprot);
        struct.setGetIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class get_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("get_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new get_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TResult.class)));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
    }

    public get_result() {
    }

    public get_result(
      TResult success,
      TIOError io)
    {
      this();
      this.success = success;
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_result(get_result other) {
      if (other.isSetSuccess()) {
        this.success = new TResult(other.success);
      }
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public get_result deepCopy() {
      return new get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.io = null;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TResult getSuccess() {
      return this.success;
    }

    public get_result setSuccess(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public get_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResult)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof get_result)
        return this.equals((get_result)that);
      return false;
    }

    public boolean equals(get_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public get_resultStandardScheme getScheme() {
        return new get_resultStandardScheme();
      }
    }

    private static class get_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<get_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, get_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, get_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public get_resultTupleScheme getScheme() {
        return new get_resultTupleScheme();
      }
    }

    private static class get_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<get_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, get_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, get_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMultiple_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<getMultiple_args, getMultiple_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiple_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("getMultiple_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField GETS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("gets", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMultiple_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMultiple_argsTupleSchemeFactory();

    /**
     * the table to get from
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * a list of TGets to fetch, the Result list
     * will have the Results at corresponding positions
     * or null if there was an error
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TGet> gets; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to get from
       */
      TABLE((short)1, "table"),
      /**
       * a list of TGets to fetch, the Result list
       * will have the Results at corresponding positions
       * or null if there was an error
       */
      GETS((short)2, "gets");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // GETS
            return GETS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.GETS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("gets", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.ListMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, 
              new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TGet.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiple_args.class, metaDataMap);
    }

    public getMultiple_args() {
    }

    public getMultiple_args(
      java.nio.ByteBuffer table,
      java.util.List<TGet> gets)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.gets = gets;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiple_args(getMultiple_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetGets()) {
        java.util.List<TGet> __this__gets = new java.util.ArrayList<TGet>(other.gets.size());
        for (TGet other_element : other.gets) {
          __this__gets.add(new TGet(other_element));
        }
        this.gets = __this__gets;
      }
    }

    public getMultiple_args deepCopy() {
      return new getMultiple_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.gets = null;
    }

    /**
     * the table to get from
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to get from
     */
    public getMultiple_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public getMultiple_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getGetsSize() {
      return (this.gets == null) ? 0 : this.gets.size();
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TGet> getGetsIterator() {
      return (this.gets == null) ? null : this.gets.iterator();
    }

    public void addToGets(TGet elem) {
      if (this.gets == null) {
        this.gets = new java.util.ArrayList<TGet>();
      }
      this.gets.add(elem);
    }

    /**
     * a list of TGets to fetch, the Result list
     * will have the Results at corresponding positions
     * or null if there was an error
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.List<TGet> getGets() {
      return this.gets;
    }

    /**
     * a list of TGets to fetch, the Result list
     * will have the Results at corresponding positions
     * or null if there was an error
     */
    public getMultiple_args setGets(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TGet> gets) {
      this.gets = gets;
      return this;
    }

    public void unsetGets() {
      this.gets = null;
    }

    /** Returns true if field gets is set (has been assigned a value) and false otherwise */
    public boolean isSetGets() {
      return this.gets != null;
    }

    public void setGetsIsSet(boolean value) {
      if (!value) {
        this.gets = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case GETS:
        if (value == null) {
          unsetGets();
        } else {
          setGets((java.util.List<TGet>)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case GETS:
        return getGets();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case GETS:
        return isSetGets();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiple_args)
        return this.equals((getMultiple_args)that);
      return false;
    }

    public boolean equals(getMultiple_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_gets = true && this.isSetGets();
      boolean that_present_gets = true && that.isSetGets();
      if (this_present_gets || that_present_gets) {
        if (!(this_present_gets && that_present_gets))
          return false;
        if (!this.gets.equals(that.gets))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetGets()) ? 131071 : 524287);
      if (isSetGets())
        hashCode = hashCode * 8191 + gets.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMultiple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGets()).compareTo(other.isSetGets());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGets()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.gets, other.gets);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMultiple_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gets:");
      if (this.gets == null) {
        sb.append("null");
      } else {
        sb.append(this.gets);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (gets == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'gets' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiple_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getMultiple_argsStandardScheme getScheme() {
        return new getMultiple_argsStandardScheme();
      }
    }

    private static class getMultiple_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<getMultiple_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, getMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GETS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST) {
                {
                  com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
                  struct.gets = new java.util.ArrayList<TGet>(_list132.size);
                  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TGet _elem133;
                  for (int _i134 = 0; _i134 < _list132.size; ++_i134)
                  {
                    _elem133 = new TGet();
                    _elem133.read(iprot);
                    struct.gets.add(_elem133);
                  }
                  iprot.readListEnd();
                }
                struct.setGetsIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, getMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.gets != null) {
          oprot.writeFieldBegin(GETS_FIELD_DESC);
          {
            oprot.writeListBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, struct.gets.size()));
            for (TGet _iter135 : struct.gets)
            {
              _iter135.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiple_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getMultiple_argsTupleScheme getScheme() {
        return new getMultiple_argsTupleScheme();
      }
    }

    private static class getMultiple_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<getMultiple_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        {
          oprot.writeI32(struct.gets.size());
          for (TGet _iter136 : struct.gets)
          {
            _iter136.write(oprot);
          }
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        {
          com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list137 = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.gets = new java.util.ArrayList<TGet>(_list137.size);
          @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TGet _elem138;
          for (int _i139 = 0; _i139 < _list137.size; ++_i139)
          {
            _elem138 = new TGet();
            _elem138.read(iprot);
            struct.gets.add(_elem138);
          }
        }
        struct.setGetsIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMultiple_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<getMultiple_result, getMultiple_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiple_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("getMultiple_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMultiple_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMultiple_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TResult> success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.ListMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, 
              new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TResult.class))));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiple_result.class, metaDataMap);
    }

    public getMultiple_result() {
    }

    public getMultiple_result(
      java.util.List<TResult> success,
      TIOError io)
    {
      this();
      this.success = success;
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiple_result(getMultiple_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TResult> __this__success = new java.util.ArrayList<TResult>(other.success.size());
        for (TResult other_element : other.success) {
          __this__success.add(new TResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public getMultiple_result deepCopy() {
      return new getMultiple_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.io = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TResult elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TResult>();
      }
      this.success.add(elem);
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.List<TResult> getSuccess() {
      return this.success;
    }

    public getMultiple_result setSuccess(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public getMultiple_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TResult>)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiple_result)
        return this.equals((getMultiple_result)that);
      return false;
    }

    public boolean equals(getMultiple_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMultiple_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMultiple_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiple_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getMultiple_resultStandardScheme getScheme() {
        return new getMultiple_resultStandardScheme();
      }
    }

    private static class getMultiple_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<getMultiple_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, getMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST) {
                {
                  com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TResult>(_list140.size);
                  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult _elem141;
                  for (int _i142 = 0; _i142 < _list140.size; ++_i142)
                  {
                    _elem141 = new TResult();
                    _elem141.read(iprot);
                    struct.success.add(_elem141);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, getMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TResult _iter143 : struct.success)
            {
              _iter143.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiple_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getMultiple_resultTupleScheme getScheme() {
        return new getMultiple_resultTupleScheme();
      }
    }

    private static class getMultiple_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<getMultiple_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TResult _iter144 : struct.success)
            {
              _iter144.write(oprot);
            }
          }
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list145 = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TResult>(_list145.size);
            @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult _elem146;
            for (int _i147 = 0; _i147 < _list145.size; ++_i147)
            {
              _elem146 = new TResult();
              _elem146.read(iprot);
              struct.success.add(_elem146);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class put_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable, Comparable<put_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("put_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField PUT_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("put", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new put_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new put_argsTupleSchemeFactory();

    /**
     * the table to put data in
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * the TPut to put
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TPut put; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to put data in
       */
      TABLE((short)1, "table"),
      /**
       * the TPut to put
       */
      PUT((short)2, "put");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // PUT
            return PUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.PUT, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("put", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TPut.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_args.class, metaDataMap);
    }

    public put_args() {
    }

    public put_args(
      java.nio.ByteBuffer table,
      TPut put)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.put = put;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_args(put_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetPut()) {
        this.put = new TPut(other.put);
      }
    }

    public put_args deepCopy() {
      return new put_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.put = null;
    }

    /**
     * the table to put data in
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to put data in
     */
    public put_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public put_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the TPut to put
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TPut getPut() {
      return this.put;
    }

    /**
     * the TPut to put
     */
    public put_args setPut(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TPut put) {
      this.put = put;
      return this;
    }

    public void unsetPut() {
      this.put = null;
    }

    /** Returns true if field put is set (has been assigned a value) and false otherwise */
    public boolean isSetPut() {
      return this.put != null;
    }

    public void setPutIsSet(boolean value) {
      if (!value) {
        this.put = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case PUT:
        if (value == null) {
          unsetPut();
        } else {
          setPut((TPut)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case PUT:
        return getPut();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case PUT:
        return isSetPut();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof put_args)
        return this.equals((put_args)that);
      return false;
    }

    public boolean equals(put_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_put = true && this.isSetPut();
      boolean that_present_put = true && that.isSetPut();
      if (this_present_put || that_present_put) {
        if (!(this_present_put && that_present_put))
          return false;
        if (!this.put.equals(that.put))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetPut()) ? 131071 : 524287);
      if (isSetPut())
        hashCode = hashCode * 8191 + put.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(put_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPut()).compareTo(other.isSetPut());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPut()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.put, other.put);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("put_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("put:");
      if (this.put == null) {
        sb.append("null");
      } else {
        sb.append(this.put);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (put == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'put' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (put != null) {
        put.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public put_argsStandardScheme getScheme() {
        return new put_argsStandardScheme();
      }
    }

    private static class put_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<put_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, put_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUT
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.put = new TPut();
                struct.put.read(iprot);
                struct.setPutIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, put_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.put != null) {
          oprot.writeFieldBegin(PUT_FIELD_DESC);
          struct.put.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public put_argsTupleScheme getScheme() {
        return new put_argsTupleScheme();
      }
    }

    private static class put_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<put_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, put_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        struct.put.write(oprot);
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, put_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.put = new TPut();
        struct.put.read(iprot);
        struct.setPutIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class put_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<put_result, put_result._Fields>, java.io.Serializable, Cloneable, Comparable<put_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("put_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new put_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new put_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_result.class, metaDataMap);
    }

    public put_result() {
    }

    public put_result(
      TIOError io)
    {
      this();
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_result(put_result other) {
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public put_result deepCopy() {
      return new put_result(this);
    }

    @Override
    public void clear() {
      this.io = null;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public put_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof put_result)
        return this.equals((put_result)that);
      return false;
    }

    public boolean equals(put_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(put_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("put_result(");
      boolean first = true;

      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public put_resultStandardScheme getScheme() {
        return new put_resultStandardScheme();
      }
    }

    private static class put_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<put_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, put_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, put_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public put_resultTupleScheme getScheme() {
        return new put_resultTupleScheme();
      }
    }

    private static class put_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<put_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, put_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, put_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkAndPut_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<checkAndPut_args, checkAndPut_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndPut_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("checkAndPut_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField ROW_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("row", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("family", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField QUALIFIER_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("qualifier", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("value", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField PUT_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("put", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkAndPut_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkAndPut_argsTupleSchemeFactory();

    /**
     * to check in and put to
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * row to check
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer row; // required
    /**
     * column family to check
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer family; // required
    /**
     * column qualifier to check
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer qualifier; // required
    /**
     * the expected value, if not provided the
     * check is for the non-existence of the
     * column in question
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer value; // required
    /**
     * the TPut to put if the check succeeds
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TPut put; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * to check in and put to
       */
      TABLE((short)1, "table"),
      /**
       * row to check
       */
      ROW((short)2, "row"),
      /**
       * column family to check
       */
      FAMILY((short)3, "family"),
      /**
       * column qualifier to check
       */
      QUALIFIER((short)4, "qualifier"),
      /**
       * the expected value, if not provided the
       * check is for the non-existence of the
       * column in question
       */
      VALUE((short)5, "value"),
      /**
       * the TPut to put if the check succeeds
       */
      PUT((short)6, "put");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // ROW
            return ROW;
          case 3: // FAMILY
            return FAMILY;
          case 4: // QUALIFIER
            return QUALIFIER;
          case 5: // VALUE
            return VALUE;
          case 6: // PUT
            return PUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.ROW, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("row", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.FAMILY, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("family", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.QUALIFIER, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("qualifier", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.VALUE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("value", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.PUT, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("put", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TPut.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAndPut_args.class, metaDataMap);
    }

    public checkAndPut_args() {
    }

    public checkAndPut_args(
      java.nio.ByteBuffer table,
      java.nio.ByteBuffer row,
      java.nio.ByteBuffer family,
      java.nio.ByteBuffer qualifier,
      java.nio.ByteBuffer value,
      TPut put)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.row = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(row);
      this.family = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(family);
      this.qualifier = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(qualifier);
      this.value = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(value);
      this.put = put;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAndPut_args(checkAndPut_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetRow()) {
        this.row = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.row);
      }
      if (other.isSetFamily()) {
        this.family = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.family);
      }
      if (other.isSetQualifier()) {
        this.qualifier = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.qualifier);
      }
      if (other.isSetValue()) {
        this.value = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.value);
      }
      if (other.isSetPut()) {
        this.put = new TPut(other.put);
      }
    }

    public checkAndPut_args deepCopy() {
      return new checkAndPut_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.row = null;
      this.family = null;
      this.qualifier = null;
      this.value = null;
      this.put = null;
    }

    /**
     * to check in and put to
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * to check in and put to
     */
    public checkAndPut_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public checkAndPut_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * row to check
     */
    public byte[] getRow() {
      setRow(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(row));
      return row == null ? null : row.array();
    }

    public java.nio.ByteBuffer bufferForRow() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(row);
    }

    /**
     * row to check
     */
    public checkAndPut_args setRow(byte[] row) {
      this.row = row == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(row.clone());
      return this;
    }

    public checkAndPut_args setRow(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer row) {
      this.row = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(row);
      return this;
    }

    public void unsetRow() {
      this.row = null;
    }

    /** Returns true if field row is set (has been assigned a value) and false otherwise */
    public boolean isSetRow() {
      return this.row != null;
    }

    public void setRowIsSet(boolean value) {
      if (!value) {
        this.row = null;
      }
    }

    /**
     * column family to check
     */
    public byte[] getFamily() {
      setFamily(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(family));
      return family == null ? null : family.array();
    }

    public java.nio.ByteBuffer bufferForFamily() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(family);
    }

    /**
     * column family to check
     */
    public checkAndPut_args setFamily(byte[] family) {
      this.family = family == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(family.clone());
      return this;
    }

    public checkAndPut_args setFamily(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer family) {
      this.family = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(family);
      return this;
    }

    public void unsetFamily() {
      this.family = null;
    }

    /** Returns true if field family is set (has been assigned a value) and false otherwise */
    public boolean isSetFamily() {
      return this.family != null;
    }

    public void setFamilyIsSet(boolean value) {
      if (!value) {
        this.family = null;
      }
    }

    /**
     * column qualifier to check
     */
    public byte[] getQualifier() {
      setQualifier(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(qualifier));
      return qualifier == null ? null : qualifier.array();
    }

    public java.nio.ByteBuffer bufferForQualifier() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(qualifier);
    }

    /**
     * column qualifier to check
     */
    public checkAndPut_args setQualifier(byte[] qualifier) {
      this.qualifier = qualifier == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(qualifier.clone());
      return this;
    }

    public checkAndPut_args setQualifier(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer qualifier) {
      this.qualifier = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(qualifier);
      return this;
    }

    public void unsetQualifier() {
      this.qualifier = null;
    }

    /** Returns true if field qualifier is set (has been assigned a value) and false otherwise */
    public boolean isSetQualifier() {
      return this.qualifier != null;
    }

    public void setQualifierIsSet(boolean value) {
      if (!value) {
        this.qualifier = null;
      }
    }

    /**
     * the expected value, if not provided the
     * check is for the non-existence of the
     * column in question
     */
    public byte[] getValue() {
      setValue(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(value));
      return value == null ? null : value.array();
    }

    public java.nio.ByteBuffer bufferForValue() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(value);
    }

    /**
     * the expected value, if not provided the
     * check is for the non-existence of the
     * column in question
     */
    public checkAndPut_args setValue(byte[] value) {
      this.value = value == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(value.clone());
      return this;
    }

    public checkAndPut_args setValue(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer value) {
      this.value = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(value);
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    /**
     * the TPut to put if the check succeeds
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TPut getPut() {
      return this.put;
    }

    /**
     * the TPut to put if the check succeeds
     */
    public checkAndPut_args setPut(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TPut put) {
      this.put = put;
      return this;
    }

    public void unsetPut() {
      this.put = null;
    }

    /** Returns true if field put is set (has been assigned a value) and false otherwise */
    public boolean isSetPut() {
      return this.put != null;
    }

    public void setPutIsSet(boolean value) {
      if (!value) {
        this.put = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case ROW:
        if (value == null) {
          unsetRow();
        } else {
          if (value instanceof byte[]) {
            setRow((byte[])value);
          } else {
            setRow((java.nio.ByteBuffer)value);
          }
        }
        break;

      case FAMILY:
        if (value == null) {
          unsetFamily();
        } else {
          if (value instanceof byte[]) {
            setFamily((byte[])value);
          } else {
            setFamily((java.nio.ByteBuffer)value);
          }
        }
        break;

      case QUALIFIER:
        if (value == null) {
          unsetQualifier();
        } else {
          if (value instanceof byte[]) {
            setQualifier((byte[])value);
          } else {
            setQualifier((java.nio.ByteBuffer)value);
          }
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          if (value instanceof byte[]) {
            setValue((byte[])value);
          } else {
            setValue((java.nio.ByteBuffer)value);
          }
        }
        break;

      case PUT:
        if (value == null) {
          unsetPut();
        } else {
          setPut((TPut)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case ROW:
        return getRow();

      case FAMILY:
        return getFamily();

      case QUALIFIER:
        return getQualifier();

      case VALUE:
        return getValue();

      case PUT:
        return getPut();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case ROW:
        return isSetRow();
      case FAMILY:
        return isSetFamily();
      case QUALIFIER:
        return isSetQualifier();
      case VALUE:
        return isSetValue();
      case PUT:
        return isSetPut();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAndPut_args)
        return this.equals((checkAndPut_args)that);
      return false;
    }

    public boolean equals(checkAndPut_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_row = true && this.isSetRow();
      boolean that_present_row = true && that.isSetRow();
      if (this_present_row || that_present_row) {
        if (!(this_present_row && that_present_row))
          return false;
        if (!this.row.equals(that.row))
          return false;
      }

      boolean this_present_family = true && this.isSetFamily();
      boolean that_present_family = true && that.isSetFamily();
      if (this_present_family || that_present_family) {
        if (!(this_present_family && that_present_family))
          return false;
        if (!this.family.equals(that.family))
          return false;
      }

      boolean this_present_qualifier = true && this.isSetQualifier();
      boolean that_present_qualifier = true && that.isSetQualifier();
      if (this_present_qualifier || that_present_qualifier) {
        if (!(this_present_qualifier && that_present_qualifier))
          return false;
        if (!this.qualifier.equals(that.qualifier))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_put = true && this.isSetPut();
      boolean that_present_put = true && that.isSetPut();
      if (this_present_put || that_present_put) {
        if (!(this_present_put && that_present_put))
          return false;
        if (!this.put.equals(that.put))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetRow()) ? 131071 : 524287);
      if (isSetRow())
        hashCode = hashCode * 8191 + row.hashCode();

      hashCode = hashCode * 8191 + ((isSetFamily()) ? 131071 : 524287);
      if (isSetFamily())
        hashCode = hashCode * 8191 + family.hashCode();

      hashCode = hashCode * 8191 + ((isSetQualifier()) ? 131071 : 524287);
      if (isSetQualifier())
        hashCode = hashCode * 8191 + qualifier.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      hashCode = hashCode * 8191 + ((isSetPut()) ? 131071 : 524287);
      if (isSetPut())
        hashCode = hashCode * 8191 + put.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkAndPut_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRow()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFamily()).compareTo(other.isSetFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamily()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.family, other.family);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQualifier()).compareTo(other.isSetQualifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQualifier()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.qualifier, other.qualifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPut()).compareTo(other.isSetPut());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPut()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.put, other.put);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkAndPut_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("row:");
      if (this.row == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.row, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("family:");
      if (this.family == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.family, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qualifier:");
      if (this.qualifier == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.qualifier, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.value, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("put:");
      if (this.put == null) {
        sb.append("null");
      } else {
        sb.append(this.put);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (row == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'row' was not present! Struct: " + toString());
      }
      if (family == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'family' was not present! Struct: " + toString());
      }
      if (qualifier == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'qualifier' was not present! Struct: " + toString());
      }
      if (put == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'put' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (put != null) {
        put.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAndPut_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public checkAndPut_argsStandardScheme getScheme() {
        return new checkAndPut_argsStandardScheme();
      }
    }

    private static class checkAndPut_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<checkAndPut_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, checkAndPut_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROW
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.row = iprot.readBinary();
                struct.setRowIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FAMILY
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.family = iprot.readBinary();
                struct.setFamilyIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // QUALIFIER
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.qualifier = iprot.readBinary();
                struct.setQualifierIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // VALUE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readBinary();
                struct.setValueIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PUT
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.put = new TPut();
                struct.put.read(iprot);
                struct.setPutIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, checkAndPut_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.row != null) {
          oprot.writeFieldBegin(ROW_FIELD_DESC);
          oprot.writeBinary(struct.row);
          oprot.writeFieldEnd();
        }
        if (struct.family != null) {
          oprot.writeFieldBegin(FAMILY_FIELD_DESC);
          oprot.writeBinary(struct.family);
          oprot.writeFieldEnd();
        }
        if (struct.qualifier != null) {
          oprot.writeFieldBegin(QUALIFIER_FIELD_DESC);
          oprot.writeBinary(struct.qualifier);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeBinary(struct.value);
          oprot.writeFieldEnd();
        }
        if (struct.put != null) {
          oprot.writeFieldBegin(PUT_FIELD_DESC);
          struct.put.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAndPut_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public checkAndPut_argsTupleScheme getScheme() {
        return new checkAndPut_argsTupleScheme();
      }
    }

    private static class checkAndPut_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<checkAndPut_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, checkAndPut_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        oprot.writeBinary(struct.row);
        oprot.writeBinary(struct.family);
        oprot.writeBinary(struct.qualifier);
        struct.put.write(oprot);
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetValue()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValue()) {
          oprot.writeBinary(struct.value);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, checkAndPut_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.row = iprot.readBinary();
        struct.setRowIsSet(true);
        struct.family = iprot.readBinary();
        struct.setFamilyIsSet(true);
        struct.qualifier = iprot.readBinary();
        struct.setQualifierIsSet(true);
        struct.put = new TPut();
        struct.put.read(iprot);
        struct.setPutIsSet(true);
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.value = iprot.readBinary();
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkAndPut_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<checkAndPut_result, checkAndPut_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndPut_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("checkAndPut_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkAndPut_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkAndPut_resultTupleSchemeFactory();

    public boolean success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAndPut_result.class, metaDataMap);
    }

    public checkAndPut_result() {
    }

    public checkAndPut_result(
      boolean success,
      TIOError io)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAndPut_result(checkAndPut_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public checkAndPut_result deepCopy() {
      return new checkAndPut_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.io = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkAndPut_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public checkAndPut_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAndPut_result)
        return this.equals((checkAndPut_result)that);
      return false;
    }

    public boolean equals(checkAndPut_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkAndPut_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkAndPut_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAndPut_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public checkAndPut_resultStandardScheme getScheme() {
        return new checkAndPut_resultStandardScheme();
      }
    }

    private static class checkAndPut_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<checkAndPut_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, checkAndPut_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, checkAndPut_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAndPut_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public checkAndPut_resultTupleScheme getScheme() {
        return new checkAndPut_resultTupleScheme();
      }
    }

    private static class checkAndPut_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<checkAndPut_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, checkAndPut_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, checkAndPut_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class putMultiple_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<putMultiple_args, putMultiple_args._Fields>, java.io.Serializable, Cloneable, Comparable<putMultiple_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("putMultiple_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField PUTS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("puts", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putMultiple_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putMultiple_argsTupleSchemeFactory();

    /**
     * the table to put data in
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * a list of TPuts to commit
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TPut> puts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to put data in
       */
      TABLE((short)1, "table"),
      /**
       * a list of TPuts to commit
       */
      PUTS((short)2, "puts");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // PUTS
            return PUTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.PUTS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("puts", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.ListMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, 
              new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TPut.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putMultiple_args.class, metaDataMap);
    }

    public putMultiple_args() {
    }

    public putMultiple_args(
      java.nio.ByteBuffer table,
      java.util.List<TPut> puts)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.puts = puts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putMultiple_args(putMultiple_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetPuts()) {
        java.util.List<TPut> __this__puts = new java.util.ArrayList<TPut>(other.puts.size());
        for (TPut other_element : other.puts) {
          __this__puts.add(new TPut(other_element));
        }
        this.puts = __this__puts;
      }
    }

    public putMultiple_args deepCopy() {
      return new putMultiple_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.puts = null;
    }

    /**
     * the table to put data in
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to put data in
     */
    public putMultiple_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public putMultiple_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getPutsSize() {
      return (this.puts == null) ? 0 : this.puts.size();
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TPut> getPutsIterator() {
      return (this.puts == null) ? null : this.puts.iterator();
    }

    public void addToPuts(TPut elem) {
      if (this.puts == null) {
        this.puts = new java.util.ArrayList<TPut>();
      }
      this.puts.add(elem);
    }

    /**
     * a list of TPuts to commit
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.List<TPut> getPuts() {
      return this.puts;
    }

    /**
     * a list of TPuts to commit
     */
    public putMultiple_args setPuts(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TPut> puts) {
      this.puts = puts;
      return this;
    }

    public void unsetPuts() {
      this.puts = null;
    }

    /** Returns true if field puts is set (has been assigned a value) and false otherwise */
    public boolean isSetPuts() {
      return this.puts != null;
    }

    public void setPutsIsSet(boolean value) {
      if (!value) {
        this.puts = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case PUTS:
        if (value == null) {
          unsetPuts();
        } else {
          setPuts((java.util.List<TPut>)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case PUTS:
        return getPuts();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case PUTS:
        return isSetPuts();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putMultiple_args)
        return this.equals((putMultiple_args)that);
      return false;
    }

    public boolean equals(putMultiple_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_puts = true && this.isSetPuts();
      boolean that_present_puts = true && that.isSetPuts();
      if (this_present_puts || that_present_puts) {
        if (!(this_present_puts && that_present_puts))
          return false;
        if (!this.puts.equals(that.puts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetPuts()) ? 131071 : 524287);
      if (isSetPuts())
        hashCode = hashCode * 8191 + puts.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(putMultiple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPuts()).compareTo(other.isSetPuts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPuts()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.puts, other.puts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putMultiple_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("puts:");
      if (this.puts == null) {
        sb.append("null");
      } else {
        sb.append(this.puts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (puts == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'puts' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putMultiple_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public putMultiple_argsStandardScheme getScheme() {
        return new putMultiple_argsStandardScheme();
      }
    }

    private static class putMultiple_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<putMultiple_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, putMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUTS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST) {
                {
                  com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                  struct.puts = new java.util.ArrayList<TPut>(_list148.size);
                  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TPut _elem149;
                  for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                  {
                    _elem149 = new TPut();
                    _elem149.read(iprot);
                    struct.puts.add(_elem149);
                  }
                  iprot.readListEnd();
                }
                struct.setPutsIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, putMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.puts != null) {
          oprot.writeFieldBegin(PUTS_FIELD_DESC);
          {
            oprot.writeListBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, struct.puts.size()));
            for (TPut _iter151 : struct.puts)
            {
              _iter151.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putMultiple_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public putMultiple_argsTupleScheme getScheme() {
        return new putMultiple_argsTupleScheme();
      }
    }

    private static class putMultiple_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<putMultiple_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, putMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        {
          oprot.writeI32(struct.puts.size());
          for (TPut _iter152 : struct.puts)
          {
            _iter152.write(oprot);
          }
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, putMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        {
          com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list153 = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.puts = new java.util.ArrayList<TPut>(_list153.size);
          @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TPut _elem154;
          for (int _i155 = 0; _i155 < _list153.size; ++_i155)
          {
            _elem154 = new TPut();
            _elem154.read(iprot);
            struct.puts.add(_elem154);
          }
        }
        struct.setPutsIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class putMultiple_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<putMultiple_result, putMultiple_result._Fields>, java.io.Serializable, Cloneable, Comparable<putMultiple_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("putMultiple_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putMultiple_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putMultiple_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putMultiple_result.class, metaDataMap);
    }

    public putMultiple_result() {
    }

    public putMultiple_result(
      TIOError io)
    {
      this();
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putMultiple_result(putMultiple_result other) {
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public putMultiple_result deepCopy() {
      return new putMultiple_result(this);
    }

    @Override
    public void clear() {
      this.io = null;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public putMultiple_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putMultiple_result)
        return this.equals((putMultiple_result)that);
      return false;
    }

    public boolean equals(putMultiple_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(putMultiple_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putMultiple_result(");
      boolean first = true;

      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putMultiple_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public putMultiple_resultStandardScheme getScheme() {
        return new putMultiple_resultStandardScheme();
      }
    }

    private static class putMultiple_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<putMultiple_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, putMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, putMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putMultiple_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public putMultiple_resultTupleScheme getScheme() {
        return new putMultiple_resultTupleScheme();
      }
    }

    private static class putMultiple_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<putMultiple_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, putMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, putMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteSingle_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<deleteSingle_args, deleteSingle_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSingle_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("deleteSingle_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField DELETE_SINGLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("deleteSingle", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteSingle_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteSingle_argsTupleSchemeFactory();

    /**
     * the table to delete from
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * the TDelete to delete
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TDelete deleteSingle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to delete from
       */
      TABLE((short)1, "table"),
      /**
       * the TDelete to delete
       */
      DELETE_SINGLE((short)2, "deleteSingle");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // DELETE_SINGLE
            return DELETE_SINGLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.DELETE_SINGLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("deleteSingle", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TDelete.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSingle_args.class, metaDataMap);
    }

    public deleteSingle_args() {
    }

    public deleteSingle_args(
      java.nio.ByteBuffer table,
      TDelete deleteSingle)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.deleteSingle = deleteSingle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSingle_args(deleteSingle_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetDeleteSingle()) {
        this.deleteSingle = new TDelete(other.deleteSingle);
      }
    }

    public deleteSingle_args deepCopy() {
      return new deleteSingle_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.deleteSingle = null;
    }

    /**
     * the table to delete from
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to delete from
     */
    public deleteSingle_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public deleteSingle_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the TDelete to delete
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TDelete getDeleteSingle() {
      return this.deleteSingle;
    }

    /**
     * the TDelete to delete
     */
    public deleteSingle_args setDeleteSingle(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TDelete deleteSingle) {
      this.deleteSingle = deleteSingle;
      return this;
    }

    public void unsetDeleteSingle() {
      this.deleteSingle = null;
    }

    /** Returns true if field deleteSingle is set (has been assigned a value) and false otherwise */
    public boolean isSetDeleteSingle() {
      return this.deleteSingle != null;
    }

    public void setDeleteSingleIsSet(boolean value) {
      if (!value) {
        this.deleteSingle = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case DELETE_SINGLE:
        if (value == null) {
          unsetDeleteSingle();
        } else {
          setDeleteSingle((TDelete)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case DELETE_SINGLE:
        return getDeleteSingle();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case DELETE_SINGLE:
        return isSetDeleteSingle();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSingle_args)
        return this.equals((deleteSingle_args)that);
      return false;
    }

    public boolean equals(deleteSingle_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_deleteSingle = true && this.isSetDeleteSingle();
      boolean that_present_deleteSingle = true && that.isSetDeleteSingle();
      if (this_present_deleteSingle || that_present_deleteSingle) {
        if (!(this_present_deleteSingle && that_present_deleteSingle))
          return false;
        if (!this.deleteSingle.equals(that.deleteSingle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetDeleteSingle()) ? 131071 : 524287);
      if (isSetDeleteSingle())
        hashCode = hashCode * 8191 + deleteSingle.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteSingle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDeleteSingle()).compareTo(other.isSetDeleteSingle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeleteSingle()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.deleteSingle, other.deleteSingle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteSingle_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deleteSingle:");
      if (this.deleteSingle == null) {
        sb.append("null");
      } else {
        sb.append(this.deleteSingle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (deleteSingle == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'deleteSingle' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (deleteSingle != null) {
        deleteSingle.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSingle_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public deleteSingle_argsStandardScheme getScheme() {
        return new deleteSingle_argsStandardScheme();
      }
    }

    private static class deleteSingle_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<deleteSingle_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, deleteSingle_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DELETE_SINGLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.deleteSingle = new TDelete();
                struct.deleteSingle.read(iprot);
                struct.setDeleteSingleIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, deleteSingle_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.deleteSingle != null) {
          oprot.writeFieldBegin(DELETE_SINGLE_FIELD_DESC);
          struct.deleteSingle.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSingle_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public deleteSingle_argsTupleScheme getScheme() {
        return new deleteSingle_argsTupleScheme();
      }
    }

    private static class deleteSingle_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<deleteSingle_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, deleteSingle_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        struct.deleteSingle.write(oprot);
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, deleteSingle_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.deleteSingle = new TDelete();
        struct.deleteSingle.read(iprot);
        struct.setDeleteSingleIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteSingle_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<deleteSingle_result, deleteSingle_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSingle_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("deleteSingle_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteSingle_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteSingle_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSingle_result.class, metaDataMap);
    }

    public deleteSingle_result() {
    }

    public deleteSingle_result(
      TIOError io)
    {
      this();
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSingle_result(deleteSingle_result other) {
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public deleteSingle_result deepCopy() {
      return new deleteSingle_result(this);
    }

    @Override
    public void clear() {
      this.io = null;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public deleteSingle_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSingle_result)
        return this.equals((deleteSingle_result)that);
      return false;
    }

    public boolean equals(deleteSingle_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteSingle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteSingle_result(");
      boolean first = true;

      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSingle_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public deleteSingle_resultStandardScheme getScheme() {
        return new deleteSingle_resultStandardScheme();
      }
    }

    private static class deleteSingle_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<deleteSingle_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, deleteSingle_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, deleteSingle_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSingle_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public deleteSingle_resultTupleScheme getScheme() {
        return new deleteSingle_resultTupleScheme();
      }
    }

    private static class deleteSingle_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<deleteSingle_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, deleteSingle_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, deleteSingle_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteMultiple_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<deleteMultiple_args, deleteMultiple_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMultiple_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("deleteMultiple_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField DELETES_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("deletes", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteMultiple_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteMultiple_argsTupleSchemeFactory();

    /**
     * the table to delete from
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * list of TDeletes to delete
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TDelete> deletes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to delete from
       */
      TABLE((short)1, "table"),
      /**
       * list of TDeletes to delete
       */
      DELETES((short)2, "deletes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // DELETES
            return DELETES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.DELETES, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("deletes", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.ListMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, 
              new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TDelete.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMultiple_args.class, metaDataMap);
    }

    public deleteMultiple_args() {
    }

    public deleteMultiple_args(
      java.nio.ByteBuffer table,
      java.util.List<TDelete> deletes)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.deletes = deletes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMultiple_args(deleteMultiple_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetDeletes()) {
        java.util.List<TDelete> __this__deletes = new java.util.ArrayList<TDelete>(other.deletes.size());
        for (TDelete other_element : other.deletes) {
          __this__deletes.add(new TDelete(other_element));
        }
        this.deletes = __this__deletes;
      }
    }

    public deleteMultiple_args deepCopy() {
      return new deleteMultiple_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.deletes = null;
    }

    /**
     * the table to delete from
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to delete from
     */
    public deleteMultiple_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public deleteMultiple_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getDeletesSize() {
      return (this.deletes == null) ? 0 : this.deletes.size();
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TDelete> getDeletesIterator() {
      return (this.deletes == null) ? null : this.deletes.iterator();
    }

    public void addToDeletes(TDelete elem) {
      if (this.deletes == null) {
        this.deletes = new java.util.ArrayList<TDelete>();
      }
      this.deletes.add(elem);
    }

    /**
     * list of TDeletes to delete
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.List<TDelete> getDeletes() {
      return this.deletes;
    }

    /**
     * list of TDeletes to delete
     */
    public deleteMultiple_args setDeletes(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TDelete> deletes) {
      this.deletes = deletes;
      return this;
    }

    public void unsetDeletes() {
      this.deletes = null;
    }

    /** Returns true if field deletes is set (has been assigned a value) and false otherwise */
    public boolean isSetDeletes() {
      return this.deletes != null;
    }

    public void setDeletesIsSet(boolean value) {
      if (!value) {
        this.deletes = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case DELETES:
        if (value == null) {
          unsetDeletes();
        } else {
          setDeletes((java.util.List<TDelete>)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case DELETES:
        return getDeletes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case DELETES:
        return isSetDeletes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMultiple_args)
        return this.equals((deleteMultiple_args)that);
      return false;
    }

    public boolean equals(deleteMultiple_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_deletes = true && this.isSetDeletes();
      boolean that_present_deletes = true && that.isSetDeletes();
      if (this_present_deletes || that_present_deletes) {
        if (!(this_present_deletes && that_present_deletes))
          return false;
        if (!this.deletes.equals(that.deletes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetDeletes()) ? 131071 : 524287);
      if (isSetDeletes())
        hashCode = hashCode * 8191 + deletes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteMultiple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDeletes()).compareTo(other.isSetDeletes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeletes()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.deletes, other.deletes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteMultiple_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deletes:");
      if (this.deletes == null) {
        sb.append("null");
      } else {
        sb.append(this.deletes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (deletes == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'deletes' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMultiple_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public deleteMultiple_argsStandardScheme getScheme() {
        return new deleteMultiple_argsStandardScheme();
      }
    }

    private static class deleteMultiple_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<deleteMultiple_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, deleteMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DELETES
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST) {
                {
                  com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list156 = iprot.readListBegin();
                  struct.deletes = new java.util.ArrayList<TDelete>(_list156.size);
                  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TDelete _elem157;
                  for (int _i158 = 0; _i158 < _list156.size; ++_i158)
                  {
                    _elem157 = new TDelete();
                    _elem157.read(iprot);
                    struct.deletes.add(_elem157);
                  }
                  iprot.readListEnd();
                }
                struct.setDeletesIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, deleteMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.deletes != null) {
          oprot.writeFieldBegin(DELETES_FIELD_DESC);
          {
            oprot.writeListBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, struct.deletes.size()));
            for (TDelete _iter159 : struct.deletes)
            {
              _iter159.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMultiple_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public deleteMultiple_argsTupleScheme getScheme() {
        return new deleteMultiple_argsTupleScheme();
      }
    }

    private static class deleteMultiple_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<deleteMultiple_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, deleteMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        {
          oprot.writeI32(struct.deletes.size());
          for (TDelete _iter160 : struct.deletes)
          {
            _iter160.write(oprot);
          }
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, deleteMultiple_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        {
          com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list161 = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.deletes = new java.util.ArrayList<TDelete>(_list161.size);
          @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TDelete _elem162;
          for (int _i163 = 0; _i163 < _list161.size; ++_i163)
          {
            _elem162 = new TDelete();
            _elem162.read(iprot);
            struct.deletes.add(_elem162);
          }
        }
        struct.setDeletesIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteMultiple_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<deleteMultiple_result, deleteMultiple_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMultiple_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("deleteMultiple_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteMultiple_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteMultiple_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TDelete> success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.ListMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, 
              new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TDelete.class))));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMultiple_result.class, metaDataMap);
    }

    public deleteMultiple_result() {
    }

    public deleteMultiple_result(
      java.util.List<TDelete> success,
      TIOError io)
    {
      this();
      this.success = success;
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMultiple_result(deleteMultiple_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TDelete> __this__success = new java.util.ArrayList<TDelete>(other.success.size());
        for (TDelete other_element : other.success) {
          __this__success.add(new TDelete(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public deleteMultiple_result deepCopy() {
      return new deleteMultiple_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.io = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TDelete> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TDelete elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TDelete>();
      }
      this.success.add(elem);
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.List<TDelete> getSuccess() {
      return this.success;
    }

    public deleteMultiple_result setSuccess(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TDelete> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public deleteMultiple_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TDelete>)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMultiple_result)
        return this.equals((deleteMultiple_result)that);
      return false;
    }

    public boolean equals(deleteMultiple_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteMultiple_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteMultiple_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMultiple_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public deleteMultiple_resultStandardScheme getScheme() {
        return new deleteMultiple_resultStandardScheme();
      }
    }

    private static class deleteMultiple_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<deleteMultiple_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, deleteMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST) {
                {
                  com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TDelete>(_list164.size);
                  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TDelete _elem165;
                  for (int _i166 = 0; _i166 < _list164.size; ++_i166)
                  {
                    _elem165 = new TDelete();
                    _elem165.read(iprot);
                    struct.success.add(_elem165);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, deleteMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TDelete _iter167 : struct.success)
            {
              _iter167.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMultiple_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public deleteMultiple_resultTupleScheme getScheme() {
        return new deleteMultiple_resultTupleScheme();
      }
    }

    private static class deleteMultiple_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<deleteMultiple_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, deleteMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TDelete _iter168 : struct.success)
            {
              _iter168.write(oprot);
            }
          }
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, deleteMultiple_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list169 = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TDelete>(_list169.size);
            @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TDelete _elem170;
            for (int _i171 = 0; _i171 < _list169.size; ++_i171)
            {
              _elem170 = new TDelete();
              _elem170.read(iprot);
              struct.success.add(_elem170);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkAndDelete_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<checkAndDelete_args, checkAndDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndDelete_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("checkAndDelete_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField ROW_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("row", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("family", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField QUALIFIER_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("qualifier", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("value", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField DELETE_SINGLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("deleteSingle", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkAndDelete_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkAndDelete_argsTupleSchemeFactory();

    /**
     * to check in and delete from
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * row to check
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer row; // required
    /**
     * column family to check
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer family; // required
    /**
     * column qualifier to check
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer qualifier; // required
    /**
     * the expected value, if not provided the
     * check is for the non-existence of the
     * column in question
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer value; // required
    /**
     * the TDelete to execute if the check succeeds
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TDelete deleteSingle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * to check in and delete from
       */
      TABLE((short)1, "table"),
      /**
       * row to check
       */
      ROW((short)2, "row"),
      /**
       * column family to check
       */
      FAMILY((short)3, "family"),
      /**
       * column qualifier to check
       */
      QUALIFIER((short)4, "qualifier"),
      /**
       * the expected value, if not provided the
       * check is for the non-existence of the
       * column in question
       */
      VALUE((short)5, "value"),
      /**
       * the TDelete to execute if the check succeeds
       */
      DELETE_SINGLE((short)6, "deleteSingle");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // ROW
            return ROW;
          case 3: // FAMILY
            return FAMILY;
          case 4: // QUALIFIER
            return QUALIFIER;
          case 5: // VALUE
            return VALUE;
          case 6: // DELETE_SINGLE
            return DELETE_SINGLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.ROW, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("row", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.FAMILY, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("family", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.QUALIFIER, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("qualifier", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.VALUE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("value", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.DELETE_SINGLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("deleteSingle", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TDelete.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAndDelete_args.class, metaDataMap);
    }

    public checkAndDelete_args() {
    }

    public checkAndDelete_args(
      java.nio.ByteBuffer table,
      java.nio.ByteBuffer row,
      java.nio.ByteBuffer family,
      java.nio.ByteBuffer qualifier,
      java.nio.ByteBuffer value,
      TDelete deleteSingle)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.row = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(row);
      this.family = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(family);
      this.qualifier = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(qualifier);
      this.value = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(value);
      this.deleteSingle = deleteSingle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAndDelete_args(checkAndDelete_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetRow()) {
        this.row = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.row);
      }
      if (other.isSetFamily()) {
        this.family = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.family);
      }
      if (other.isSetQualifier()) {
        this.qualifier = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.qualifier);
      }
      if (other.isSetValue()) {
        this.value = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.value);
      }
      if (other.isSetDeleteSingle()) {
        this.deleteSingle = new TDelete(other.deleteSingle);
      }
    }

    public checkAndDelete_args deepCopy() {
      return new checkAndDelete_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.row = null;
      this.family = null;
      this.qualifier = null;
      this.value = null;
      this.deleteSingle = null;
    }

    /**
     * to check in and delete from
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * to check in and delete from
     */
    public checkAndDelete_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public checkAndDelete_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * row to check
     */
    public byte[] getRow() {
      setRow(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(row));
      return row == null ? null : row.array();
    }

    public java.nio.ByteBuffer bufferForRow() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(row);
    }

    /**
     * row to check
     */
    public checkAndDelete_args setRow(byte[] row) {
      this.row = row == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(row.clone());
      return this;
    }

    public checkAndDelete_args setRow(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer row) {
      this.row = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(row);
      return this;
    }

    public void unsetRow() {
      this.row = null;
    }

    /** Returns true if field row is set (has been assigned a value) and false otherwise */
    public boolean isSetRow() {
      return this.row != null;
    }

    public void setRowIsSet(boolean value) {
      if (!value) {
        this.row = null;
      }
    }

    /**
     * column family to check
     */
    public byte[] getFamily() {
      setFamily(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(family));
      return family == null ? null : family.array();
    }

    public java.nio.ByteBuffer bufferForFamily() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(family);
    }

    /**
     * column family to check
     */
    public checkAndDelete_args setFamily(byte[] family) {
      this.family = family == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(family.clone());
      return this;
    }

    public checkAndDelete_args setFamily(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer family) {
      this.family = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(family);
      return this;
    }

    public void unsetFamily() {
      this.family = null;
    }

    /** Returns true if field family is set (has been assigned a value) and false otherwise */
    public boolean isSetFamily() {
      return this.family != null;
    }

    public void setFamilyIsSet(boolean value) {
      if (!value) {
        this.family = null;
      }
    }

    /**
     * column qualifier to check
     */
    public byte[] getQualifier() {
      setQualifier(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(qualifier));
      return qualifier == null ? null : qualifier.array();
    }

    public java.nio.ByteBuffer bufferForQualifier() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(qualifier);
    }

    /**
     * column qualifier to check
     */
    public checkAndDelete_args setQualifier(byte[] qualifier) {
      this.qualifier = qualifier == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(qualifier.clone());
      return this;
    }

    public checkAndDelete_args setQualifier(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer qualifier) {
      this.qualifier = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(qualifier);
      return this;
    }

    public void unsetQualifier() {
      this.qualifier = null;
    }

    /** Returns true if field qualifier is set (has been assigned a value) and false otherwise */
    public boolean isSetQualifier() {
      return this.qualifier != null;
    }

    public void setQualifierIsSet(boolean value) {
      if (!value) {
        this.qualifier = null;
      }
    }

    /**
     * the expected value, if not provided the
     * check is for the non-existence of the
     * column in question
     */
    public byte[] getValue() {
      setValue(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(value));
      return value == null ? null : value.array();
    }

    public java.nio.ByteBuffer bufferForValue() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(value);
    }

    /**
     * the expected value, if not provided the
     * check is for the non-existence of the
     * column in question
     */
    public checkAndDelete_args setValue(byte[] value) {
      this.value = value == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(value.clone());
      return this;
    }

    public checkAndDelete_args setValue(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer value) {
      this.value = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(value);
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    /**
     * the TDelete to execute if the check succeeds
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TDelete getDeleteSingle() {
      return this.deleteSingle;
    }

    /**
     * the TDelete to execute if the check succeeds
     */
    public checkAndDelete_args setDeleteSingle(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TDelete deleteSingle) {
      this.deleteSingle = deleteSingle;
      return this;
    }

    public void unsetDeleteSingle() {
      this.deleteSingle = null;
    }

    /** Returns true if field deleteSingle is set (has been assigned a value) and false otherwise */
    public boolean isSetDeleteSingle() {
      return this.deleteSingle != null;
    }

    public void setDeleteSingleIsSet(boolean value) {
      if (!value) {
        this.deleteSingle = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case ROW:
        if (value == null) {
          unsetRow();
        } else {
          if (value instanceof byte[]) {
            setRow((byte[])value);
          } else {
            setRow((java.nio.ByteBuffer)value);
          }
        }
        break;

      case FAMILY:
        if (value == null) {
          unsetFamily();
        } else {
          if (value instanceof byte[]) {
            setFamily((byte[])value);
          } else {
            setFamily((java.nio.ByteBuffer)value);
          }
        }
        break;

      case QUALIFIER:
        if (value == null) {
          unsetQualifier();
        } else {
          if (value instanceof byte[]) {
            setQualifier((byte[])value);
          } else {
            setQualifier((java.nio.ByteBuffer)value);
          }
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          if (value instanceof byte[]) {
            setValue((byte[])value);
          } else {
            setValue((java.nio.ByteBuffer)value);
          }
        }
        break;

      case DELETE_SINGLE:
        if (value == null) {
          unsetDeleteSingle();
        } else {
          setDeleteSingle((TDelete)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case ROW:
        return getRow();

      case FAMILY:
        return getFamily();

      case QUALIFIER:
        return getQualifier();

      case VALUE:
        return getValue();

      case DELETE_SINGLE:
        return getDeleteSingle();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case ROW:
        return isSetRow();
      case FAMILY:
        return isSetFamily();
      case QUALIFIER:
        return isSetQualifier();
      case VALUE:
        return isSetValue();
      case DELETE_SINGLE:
        return isSetDeleteSingle();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAndDelete_args)
        return this.equals((checkAndDelete_args)that);
      return false;
    }

    public boolean equals(checkAndDelete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_row = true && this.isSetRow();
      boolean that_present_row = true && that.isSetRow();
      if (this_present_row || that_present_row) {
        if (!(this_present_row && that_present_row))
          return false;
        if (!this.row.equals(that.row))
          return false;
      }

      boolean this_present_family = true && this.isSetFamily();
      boolean that_present_family = true && that.isSetFamily();
      if (this_present_family || that_present_family) {
        if (!(this_present_family && that_present_family))
          return false;
        if (!this.family.equals(that.family))
          return false;
      }

      boolean this_present_qualifier = true && this.isSetQualifier();
      boolean that_present_qualifier = true && that.isSetQualifier();
      if (this_present_qualifier || that_present_qualifier) {
        if (!(this_present_qualifier && that_present_qualifier))
          return false;
        if (!this.qualifier.equals(that.qualifier))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_deleteSingle = true && this.isSetDeleteSingle();
      boolean that_present_deleteSingle = true && that.isSetDeleteSingle();
      if (this_present_deleteSingle || that_present_deleteSingle) {
        if (!(this_present_deleteSingle && that_present_deleteSingle))
          return false;
        if (!this.deleteSingle.equals(that.deleteSingle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetRow()) ? 131071 : 524287);
      if (isSetRow())
        hashCode = hashCode * 8191 + row.hashCode();

      hashCode = hashCode * 8191 + ((isSetFamily()) ? 131071 : 524287);
      if (isSetFamily())
        hashCode = hashCode * 8191 + family.hashCode();

      hashCode = hashCode * 8191 + ((isSetQualifier()) ? 131071 : 524287);
      if (isSetQualifier())
        hashCode = hashCode * 8191 + qualifier.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      hashCode = hashCode * 8191 + ((isSetDeleteSingle()) ? 131071 : 524287);
      if (isSetDeleteSingle())
        hashCode = hashCode * 8191 + deleteSingle.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkAndDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRow()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFamily()).compareTo(other.isSetFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamily()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.family, other.family);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQualifier()).compareTo(other.isSetQualifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQualifier()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.qualifier, other.qualifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDeleteSingle()).compareTo(other.isSetDeleteSingle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeleteSingle()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.deleteSingle, other.deleteSingle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkAndDelete_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("row:");
      if (this.row == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.row, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("family:");
      if (this.family == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.family, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qualifier:");
      if (this.qualifier == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.qualifier, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.value, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deleteSingle:");
      if (this.deleteSingle == null) {
        sb.append("null");
      } else {
        sb.append(this.deleteSingle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (row == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'row' was not present! Struct: " + toString());
      }
      if (family == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'family' was not present! Struct: " + toString());
      }
      if (qualifier == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'qualifier' was not present! Struct: " + toString());
      }
      if (deleteSingle == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'deleteSingle' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (deleteSingle != null) {
        deleteSingle.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAndDelete_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public checkAndDelete_argsStandardScheme getScheme() {
        return new checkAndDelete_argsStandardScheme();
      }
    }

    private static class checkAndDelete_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<checkAndDelete_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, checkAndDelete_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROW
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.row = iprot.readBinary();
                struct.setRowIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FAMILY
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.family = iprot.readBinary();
                struct.setFamilyIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // QUALIFIER
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.qualifier = iprot.readBinary();
                struct.setQualifierIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // VALUE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readBinary();
                struct.setValueIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DELETE_SINGLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.deleteSingle = new TDelete();
                struct.deleteSingle.read(iprot);
                struct.setDeleteSingleIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, checkAndDelete_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.row != null) {
          oprot.writeFieldBegin(ROW_FIELD_DESC);
          oprot.writeBinary(struct.row);
          oprot.writeFieldEnd();
        }
        if (struct.family != null) {
          oprot.writeFieldBegin(FAMILY_FIELD_DESC);
          oprot.writeBinary(struct.family);
          oprot.writeFieldEnd();
        }
        if (struct.qualifier != null) {
          oprot.writeFieldBegin(QUALIFIER_FIELD_DESC);
          oprot.writeBinary(struct.qualifier);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeBinary(struct.value);
          oprot.writeFieldEnd();
        }
        if (struct.deleteSingle != null) {
          oprot.writeFieldBegin(DELETE_SINGLE_FIELD_DESC);
          struct.deleteSingle.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAndDelete_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public checkAndDelete_argsTupleScheme getScheme() {
        return new checkAndDelete_argsTupleScheme();
      }
    }

    private static class checkAndDelete_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<checkAndDelete_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, checkAndDelete_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        oprot.writeBinary(struct.row);
        oprot.writeBinary(struct.family);
        oprot.writeBinary(struct.qualifier);
        struct.deleteSingle.write(oprot);
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetValue()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValue()) {
          oprot.writeBinary(struct.value);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, checkAndDelete_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.row = iprot.readBinary();
        struct.setRowIsSet(true);
        struct.family = iprot.readBinary();
        struct.setFamilyIsSet(true);
        struct.qualifier = iprot.readBinary();
        struct.setQualifierIsSet(true);
        struct.deleteSingle = new TDelete();
        struct.deleteSingle.read(iprot);
        struct.setDeleteSingleIsSet(true);
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.value = iprot.readBinary();
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkAndDelete_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<checkAndDelete_result, checkAndDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndDelete_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("checkAndDelete_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkAndDelete_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkAndDelete_resultTupleSchemeFactory();

    public boolean success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAndDelete_result.class, metaDataMap);
    }

    public checkAndDelete_result() {
    }

    public checkAndDelete_result(
      boolean success,
      TIOError io)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAndDelete_result(checkAndDelete_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public checkAndDelete_result deepCopy() {
      return new checkAndDelete_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.io = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkAndDelete_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public checkAndDelete_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAndDelete_result)
        return this.equals((checkAndDelete_result)that);
      return false;
    }

    public boolean equals(checkAndDelete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkAndDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkAndDelete_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAndDelete_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public checkAndDelete_resultStandardScheme getScheme() {
        return new checkAndDelete_resultStandardScheme();
      }
    }

    private static class checkAndDelete_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<checkAndDelete_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, checkAndDelete_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, checkAndDelete_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAndDelete_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public checkAndDelete_resultTupleScheme getScheme() {
        return new checkAndDelete_resultTupleScheme();
      }
    }

    private static class checkAndDelete_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<checkAndDelete_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, checkAndDelete_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, checkAndDelete_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class increment_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<increment_args, increment_args._Fields>, java.io.Serializable, Cloneable, Comparable<increment_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("increment_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField INCREMENT_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("increment", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new increment_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new increment_argsTupleSchemeFactory();

    /**
     * the table to increment the value on
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * the TIncrement to increment
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIncrement increment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to increment the value on
       */
      TABLE((short)1, "table"),
      /**
       * the TIncrement to increment
       */
      INCREMENT((short)2, "increment");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // INCREMENT
            return INCREMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.INCREMENT, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("increment", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIncrement.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(increment_args.class, metaDataMap);
    }

    public increment_args() {
    }

    public increment_args(
      java.nio.ByteBuffer table,
      TIncrement increment)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.increment = increment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public increment_args(increment_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetIncrement()) {
        this.increment = new TIncrement(other.increment);
      }
    }

    public increment_args deepCopy() {
      return new increment_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.increment = null;
    }

    /**
     * the table to increment the value on
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to increment the value on
     */
    public increment_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public increment_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the TIncrement to increment
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIncrement getIncrement() {
      return this.increment;
    }

    /**
     * the TIncrement to increment
     */
    public increment_args setIncrement(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIncrement increment) {
      this.increment = increment;
      return this;
    }

    public void unsetIncrement() {
      this.increment = null;
    }

    /** Returns true if field increment is set (has been assigned a value) and false otherwise */
    public boolean isSetIncrement() {
      return this.increment != null;
    }

    public void setIncrementIsSet(boolean value) {
      if (!value) {
        this.increment = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case INCREMENT:
        if (value == null) {
          unsetIncrement();
        } else {
          setIncrement((TIncrement)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case INCREMENT:
        return getIncrement();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case INCREMENT:
        return isSetIncrement();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof increment_args)
        return this.equals((increment_args)that);
      return false;
    }

    public boolean equals(increment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_increment = true && this.isSetIncrement();
      boolean that_present_increment = true && that.isSetIncrement();
      if (this_present_increment || that_present_increment) {
        if (!(this_present_increment && that_present_increment))
          return false;
        if (!this.increment.equals(that.increment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetIncrement()) ? 131071 : 524287);
      if (isSetIncrement())
        hashCode = hashCode * 8191 + increment.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(increment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIncrement()).compareTo(other.isSetIncrement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIncrement()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.increment, other.increment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("increment_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("increment:");
      if (this.increment == null) {
        sb.append("null");
      } else {
        sb.append(this.increment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (increment == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'increment' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (increment != null) {
        increment.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class increment_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public increment_argsStandardScheme getScheme() {
        return new increment_argsStandardScheme();
      }
    }

    private static class increment_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<increment_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, increment_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INCREMENT
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.increment = new TIncrement();
                struct.increment.read(iprot);
                struct.setIncrementIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, increment_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.increment != null) {
          oprot.writeFieldBegin(INCREMENT_FIELD_DESC);
          struct.increment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class increment_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public increment_argsTupleScheme getScheme() {
        return new increment_argsTupleScheme();
      }
    }

    private static class increment_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<increment_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, increment_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        struct.increment.write(oprot);
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, increment_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.increment = new TIncrement();
        struct.increment.read(iprot);
        struct.setIncrementIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class increment_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<increment_result, increment_result._Fields>, java.io.Serializable, Cloneable, Comparable<increment_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("increment_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new increment_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new increment_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TResult.class)));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(increment_result.class, metaDataMap);
    }

    public increment_result() {
    }

    public increment_result(
      TResult success,
      TIOError io)
    {
      this();
      this.success = success;
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public increment_result(increment_result other) {
      if (other.isSetSuccess()) {
        this.success = new TResult(other.success);
      }
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public increment_result deepCopy() {
      return new increment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.io = null;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TResult getSuccess() {
      return this.success;
    }

    public increment_result setSuccess(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public increment_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResult)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof increment_result)
        return this.equals((increment_result)that);
      return false;
    }

    public boolean equals(increment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(increment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("increment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class increment_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public increment_resultStandardScheme getScheme() {
        return new increment_resultStandardScheme();
      }
    }

    private static class increment_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<increment_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, increment_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, increment_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class increment_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public increment_resultTupleScheme getScheme() {
        return new increment_resultTupleScheme();
      }
    }

    private static class increment_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<increment_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, increment_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, increment_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class append_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<append_args, append_args._Fields>, java.io.Serializable, Cloneable, Comparable<append_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("append_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField APPEND_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("append", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new append_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new append_argsTupleSchemeFactory();

    /**
     * the table to append the value on
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * the TAppend to append
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TAppend append; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to append the value on
       */
      TABLE((short)1, "table"),
      /**
       * the TAppend to append
       */
      APPEND((short)2, "append");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // APPEND
            return APPEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.APPEND, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("append", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TAppend.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(append_args.class, metaDataMap);
    }

    public append_args() {
    }

    public append_args(
      java.nio.ByteBuffer table,
      TAppend append)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.append = append;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public append_args(append_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetAppend()) {
        this.append = new TAppend(other.append);
      }
    }

    public append_args deepCopy() {
      return new append_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.append = null;
    }

    /**
     * the table to append the value on
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to append the value on
     */
    public append_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public append_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the TAppend to append
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TAppend getAppend() {
      return this.append;
    }

    /**
     * the TAppend to append
     */
    public append_args setAppend(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TAppend append) {
      this.append = append;
      return this;
    }

    public void unsetAppend() {
      this.append = null;
    }

    /** Returns true if field append is set (has been assigned a value) and false otherwise */
    public boolean isSetAppend() {
      return this.append != null;
    }

    public void setAppendIsSet(boolean value) {
      if (!value) {
        this.append = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case APPEND:
        if (value == null) {
          unsetAppend();
        } else {
          setAppend((TAppend)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case APPEND:
        return getAppend();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case APPEND:
        return isSetAppend();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof append_args)
        return this.equals((append_args)that);
      return false;
    }

    public boolean equals(append_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_append = true && this.isSetAppend();
      boolean that_present_append = true && that.isSetAppend();
      if (this_present_append || that_present_append) {
        if (!(this_present_append && that_present_append))
          return false;
        if (!this.append.equals(that.append))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetAppend()) ? 131071 : 524287);
      if (isSetAppend())
        hashCode = hashCode * 8191 + append.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(append_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAppend()).compareTo(other.isSetAppend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppend()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.append, other.append);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("append_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("append:");
      if (this.append == null) {
        sb.append("null");
      } else {
        sb.append(this.append);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (append == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'append' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (append != null) {
        append.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class append_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public append_argsStandardScheme getScheme() {
        return new append_argsStandardScheme();
      }
    }

    private static class append_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<append_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, append_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPEND
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.append = new TAppend();
                struct.append.read(iprot);
                struct.setAppendIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, append_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.append != null) {
          oprot.writeFieldBegin(APPEND_FIELD_DESC);
          struct.append.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class append_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public append_argsTupleScheme getScheme() {
        return new append_argsTupleScheme();
      }
    }

    private static class append_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<append_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, append_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        struct.append.write(oprot);
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, append_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.append = new TAppend();
        struct.append.read(iprot);
        struct.setAppendIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class append_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<append_result, append_result._Fields>, java.io.Serializable, Cloneable, Comparable<append_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("append_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new append_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new append_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TResult.class)));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(append_result.class, metaDataMap);
    }

    public append_result() {
    }

    public append_result(
      TResult success,
      TIOError io)
    {
      this();
      this.success = success;
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public append_result(append_result other) {
      if (other.isSetSuccess()) {
        this.success = new TResult(other.success);
      }
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public append_result deepCopy() {
      return new append_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.io = null;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TResult getSuccess() {
      return this.success;
    }

    public append_result setSuccess(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public append_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResult)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof append_result)
        return this.equals((append_result)that);
      return false;
    }

    public boolean equals(append_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(append_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("append_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class append_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public append_resultStandardScheme getScheme() {
        return new append_resultStandardScheme();
      }
    }

    private static class append_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<append_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, append_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, append_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class append_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public append_resultTupleScheme getScheme() {
        return new append_resultTupleScheme();
      }
    }

    private static class append_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<append_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, append_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, append_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class openScanner_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<openScanner_args, openScanner_args._Fields>, java.io.Serializable, Cloneable, Comparable<openScanner_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("openScanner_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SCAN_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("scan", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new openScanner_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new openScanner_argsTupleSchemeFactory();

    /**
     * the table to get the Scanner for
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * the scan object to get a Scanner for
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TScan scan; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to get the Scanner for
       */
      TABLE((short)1, "table"),
      /**
       * the scan object to get a Scanner for
       */
      SCAN((short)2, "scan");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // SCAN
            return SCAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.SCAN, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("scan", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TScan.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openScanner_args.class, metaDataMap);
    }

    public openScanner_args() {
    }

    public openScanner_args(
      java.nio.ByteBuffer table,
      TScan scan)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.scan = scan;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openScanner_args(openScanner_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetScan()) {
        this.scan = new TScan(other.scan);
      }
    }

    public openScanner_args deepCopy() {
      return new openScanner_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.scan = null;
    }

    /**
     * the table to get the Scanner for
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to get the Scanner for
     */
    public openScanner_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public openScanner_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the scan object to get a Scanner for
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TScan getScan() {
      return this.scan;
    }

    /**
     * the scan object to get a Scanner for
     */
    public openScanner_args setScan(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TScan scan) {
      this.scan = scan;
      return this;
    }

    public void unsetScan() {
      this.scan = null;
    }

    /** Returns true if field scan is set (has been assigned a value) and false otherwise */
    public boolean isSetScan() {
      return this.scan != null;
    }

    public void setScanIsSet(boolean value) {
      if (!value) {
        this.scan = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case SCAN:
        if (value == null) {
          unsetScan();
        } else {
          setScan((TScan)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case SCAN:
        return getScan();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case SCAN:
        return isSetScan();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof openScanner_args)
        return this.equals((openScanner_args)that);
      return false;
    }

    public boolean equals(openScanner_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_scan = true && this.isSetScan();
      boolean that_present_scan = true && that.isSetScan();
      if (this_present_scan || that_present_scan) {
        if (!(this_present_scan && that_present_scan))
          return false;
        if (!this.scan.equals(that.scan))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetScan()) ? 131071 : 524287);
      if (isSetScan())
        hashCode = hashCode * 8191 + scan.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(openScanner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetScan()).compareTo(other.isSetScan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScan()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.scan, other.scan);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("openScanner_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan:");
      if (this.scan == null) {
        sb.append("null");
      } else {
        sb.append(this.scan);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (scan == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'scan' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (scan != null) {
        scan.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openScanner_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public openScanner_argsStandardScheme getScheme() {
        return new openScanner_argsStandardScheme();
      }
    }

    private static class openScanner_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<openScanner_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, openScanner_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCAN
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.scan = new TScan();
                struct.scan.read(iprot);
                struct.setScanIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, openScanner_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.scan != null) {
          oprot.writeFieldBegin(SCAN_FIELD_DESC);
          struct.scan.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openScanner_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public openScanner_argsTupleScheme getScheme() {
        return new openScanner_argsTupleScheme();
      }
    }

    private static class openScanner_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<openScanner_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, openScanner_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        struct.scan.write(oprot);
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, openScanner_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.scan = new TScan();
        struct.scan.read(iprot);
        struct.setScanIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class openScanner_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<openScanner_result, openScanner_result._Fields>, java.io.Serializable, Cloneable, Comparable<openScanner_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("openScanner_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new openScanner_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new openScanner_resultTupleSchemeFactory();

    public int success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openScanner_result.class, metaDataMap);
    }

    public openScanner_result() {
    }

    public openScanner_result(
      int success,
      TIOError io)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openScanner_result(openScanner_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public openScanner_result deepCopy() {
      return new openScanner_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.io = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public openScanner_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public openScanner_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof openScanner_result)
        return this.equals((openScanner_result)that);
      return false;
    }

    public boolean equals(openScanner_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(openScanner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("openScanner_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openScanner_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public openScanner_resultStandardScheme getScheme() {
        return new openScanner_resultStandardScheme();
      }
    }

    private static class openScanner_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<openScanner_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, openScanner_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, openScanner_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openScanner_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public openScanner_resultTupleScheme getScheme() {
        return new openScanner_resultTupleScheme();
      }
    }

    private static class openScanner_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<openScanner_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, openScanner_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, openScanner_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getScannerRows_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<getScannerRows_args, getScannerRows_args._Fields>, java.io.Serializable, Cloneable, Comparable<getScannerRows_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("getScannerRows_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SCANNER_ID_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("scannerId", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("numRows", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getScannerRows_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getScannerRows_argsTupleSchemeFactory();

    /**
     * the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
     */
    public int scannerId; // required
    /**
     * number of rows to return
     */
    public int numRows; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
       */
      SCANNER_ID((short)1, "scannerId"),
      /**
       * number of rows to return
       */
      NUM_ROWS((short)2, "numRows");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER_ID
            return SCANNER_ID;
          case 2: // NUM_ROWS
            return NUM_ROWS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNERID_ISSET_ID = 0;
    private static final int __NUMROWS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER_ID, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("scannerId", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM_ROWS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("numRows", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getScannerRows_args.class, metaDataMap);
    }

    public getScannerRows_args() {
      this.numRows = 1;

    }

    public getScannerRows_args(
      int scannerId,
      int numRows)
    {
      this();
      this.scannerId = scannerId;
      setScannerIdIsSet(true);
      this.numRows = numRows;
      setNumRowsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getScannerRows_args(getScannerRows_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.scannerId = other.scannerId;
      this.numRows = other.numRows;
    }

    public getScannerRows_args deepCopy() {
      return new getScannerRows_args(this);
    }

    @Override
    public void clear() {
      setScannerIdIsSet(false);
      this.scannerId = 0;
      this.numRows = 1;

    }

    /**
     * the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
     */
    public int getScannerId() {
      return this.scannerId;
    }

    /**
     * the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
     */
    public getScannerRows_args setScannerId(int scannerId) {
      this.scannerId = scannerId;
      setScannerIdIsSet(true);
      return this;
    }

    public void unsetScannerId() {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCANNERID_ISSET_ID);
    }

    /** Returns true if field scannerId is set (has been assigned a value) and false otherwise */
    public boolean isSetScannerId() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCANNERID_ISSET_ID);
    }

    public void setScannerIdIsSet(boolean value) {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCANNERID_ISSET_ID, value);
    }

    /**
     * number of rows to return
     */
    public int getNumRows() {
      return this.numRows;
    }

    /**
     * number of rows to return
     */
    public getScannerRows_args setNumRows(int numRows) {
      this.numRows = numRows;
      setNumRowsIsSet(true);
      return this;
    }

    public void unsetNumRows() {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMROWS_ISSET_ID);
    }

    /** Returns true if field numRows is set (has been assigned a value) and false otherwise */
    public boolean isSetNumRows() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMROWS_ISSET_ID);
    }

    public void setNumRowsIsSet(boolean value) {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMROWS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCANNER_ID:
        if (value == null) {
          unsetScannerId();
        } else {
          setScannerId((java.lang.Integer)value);
        }
        break;

      case NUM_ROWS:
        if (value == null) {
          unsetNumRows();
        } else {
          setNumRows((java.lang.Integer)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER_ID:
        return getScannerId();

      case NUM_ROWS:
        return getNumRows();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCANNER_ID:
        return isSetScannerId();
      case NUM_ROWS:
        return isSetNumRows();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getScannerRows_args)
        return this.equals((getScannerRows_args)that);
      return false;
    }

    public boolean equals(getScannerRows_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_scannerId = true;
      boolean that_present_scannerId = true;
      if (this_present_scannerId || that_present_scannerId) {
        if (!(this_present_scannerId && that_present_scannerId))
          return false;
        if (this.scannerId != that.scannerId)
          return false;
      }

      boolean this_present_numRows = true;
      boolean that_present_numRows = true;
      if (this_present_numRows || that_present_numRows) {
        if (!(this_present_numRows && that_present_numRows))
          return false;
        if (this.numRows != that.numRows)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + scannerId;

      hashCode = hashCode * 8191 + numRows;

      return hashCode;
    }

    @Override
    public int compareTo(getScannerRows_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetScannerId()).compareTo(other.isSetScannerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScannerId()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.scannerId, other.scannerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumRows()).compareTo(other.isSetNumRows());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRows()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.numRows, other.numRows);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getScannerRows_args(");
      boolean first = true;

      sb.append("scannerId:");
      sb.append(this.scannerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRows:");
      sb.append(this.numRows);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'scannerId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getScannerRows_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getScannerRows_argsStandardScheme getScheme() {
        return new getScannerRows_argsStandardScheme();
      }
    }

    private static class getScannerRows_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<getScannerRows_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, getScannerRows_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCANNER_ID
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32) {
                struct.scannerId = iprot.readI32();
                struct.setScannerIdIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM_ROWS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32) {
                struct.numRows = iprot.readI32();
                struct.setNumRowsIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetScannerId()) {
          throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'scannerId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, getScannerRows_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SCANNER_ID_FIELD_DESC);
        oprot.writeI32(struct.scannerId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
        oprot.writeI32(struct.numRows);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getScannerRows_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getScannerRows_argsTupleScheme getScheme() {
        return new getScannerRows_argsTupleScheme();
      }
    }

    private static class getScannerRows_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<getScannerRows_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getScannerRows_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeI32(struct.scannerId);
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNumRows()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNumRows()) {
          oprot.writeI32(struct.numRows);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getScannerRows_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.scannerId = iprot.readI32();
        struct.setScannerIdIsSet(true);
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.numRows = iprot.readI32();
          struct.setNumRowsIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getScannerRows_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<getScannerRows_result, getScannerRows_result._Fields>, java.io.Serializable, Cloneable, Comparable<getScannerRows_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("getScannerRows_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IA_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("ia", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getScannerRows_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getScannerRows_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TResult> success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required
    /**
     * if the scannerId is invalid
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIllegalArgument ia; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io"),
      /**
       * if the scannerId is invalid
       */
      IA((short)2, "ia");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          case 2: // IA
            return IA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.ListMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, 
              new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TResult.class))));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      tmpMap.put(_Fields.IA, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("ia", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIllegalArgument.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getScannerRows_result.class, metaDataMap);
    }

    public getScannerRows_result() {
    }

    public getScannerRows_result(
      java.util.List<TResult> success,
      TIOError io,
      TIllegalArgument ia)
    {
      this();
      this.success = success;
      this.io = io;
      this.ia = ia;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getScannerRows_result(getScannerRows_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TResult> __this__success = new java.util.ArrayList<TResult>(other.success.size());
        for (TResult other_element : other.success) {
          __this__success.add(new TResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
      if (other.isSetIa()) {
        this.ia = new TIllegalArgument(other.ia);
      }
    }

    public getScannerRows_result deepCopy() {
      return new getScannerRows_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.io = null;
      this.ia = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TResult elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TResult>();
      }
      this.success.add(elem);
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.List<TResult> getSuccess() {
      return this.success;
    }

    public getScannerRows_result setSuccess(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public getScannerRows_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    /**
     * if the scannerId is invalid
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIllegalArgument getIa() {
      return this.ia;
    }

    /**
     * if the scannerId is invalid
     */
    public getScannerRows_result setIa(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIllegalArgument ia) {
      this.ia = ia;
      return this;
    }

    public void unsetIa() {
      this.ia = null;
    }

    /** Returns true if field ia is set (has been assigned a value) and false otherwise */
    public boolean isSetIa() {
      return this.ia != null;
    }

    public void setIaIsSet(boolean value) {
      if (!value) {
        this.ia = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TResult>)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      case IA:
        if (value == null) {
          unsetIa();
        } else {
          setIa((TIllegalArgument)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IO:
        return getIo();

      case IA:
        return getIa();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      case IA:
        return isSetIa();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getScannerRows_result)
        return this.equals((getScannerRows_result)that);
      return false;
    }

    public boolean equals(getScannerRows_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      boolean this_present_ia = true && this.isSetIa();
      boolean that_present_ia = true && that.isSetIa();
      if (this_present_ia || that_present_ia) {
        if (!(this_present_ia && that_present_ia))
          return false;
        if (!this.ia.equals(that.ia))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      hashCode = hashCode * 8191 + ((isSetIa()) ? 131071 : 524287);
      if (isSetIa())
        hashCode = hashCode * 8191 + ia.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getScannerRows_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIa()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getScannerRows_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ia:");
      if (this.ia == null) {
        sb.append("null");
      } else {
        sb.append(this.ia);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getScannerRows_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getScannerRows_resultStandardScheme getScheme() {
        return new getScannerRows_resultStandardScheme();
      }
    }

    private static class getScannerRows_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<getScannerRows_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, getScannerRows_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST) {
                {
                  com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TResult>(_list172.size);
                  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult _elem173;
                  for (int _i174 = 0; _i174 < _list172.size; ++_i174)
                  {
                    _elem173 = new TResult();
                    _elem173.read(iprot);
                    struct.success.add(_elem173);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IA
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.ia = new TIllegalArgument();
                struct.ia.read(iprot);
                struct.setIaIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, getScannerRows_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TResult _iter175 : struct.success)
            {
              _iter175.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ia != null) {
          oprot.writeFieldBegin(IA_FIELD_DESC);
          struct.ia.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getScannerRows_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getScannerRows_resultTupleScheme getScheme() {
        return new getScannerRows_resultTupleScheme();
      }
    }

    private static class getScannerRows_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<getScannerRows_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getScannerRows_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        if (struct.isSetIa()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TResult _iter176 : struct.success)
            {
              _iter176.write(oprot);
            }
          }
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
        if (struct.isSetIa()) {
          struct.ia.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getScannerRows_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list177 = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TResult>(_list177.size);
            @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult _elem178;
            for (int _i179 = 0; _i179 < _list177.size; ++_i179)
            {
              _elem178 = new TResult();
              _elem178.read(iprot);
              struct.success.add(_elem178);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ia = new TIllegalArgument();
          struct.ia.read(iprot);
          struct.setIaIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class closeScanner_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<closeScanner_args, closeScanner_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeScanner_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("closeScanner_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SCANNER_ID_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("scannerId", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new closeScanner_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new closeScanner_argsTupleSchemeFactory();

    /**
     * the Id of the Scanner to close *
     */
    public int scannerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the Id of the Scanner to close *
       */
      SCANNER_ID((short)1, "scannerId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER_ID
            return SCANNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER_ID, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("scannerId", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeScanner_args.class, metaDataMap);
    }

    public closeScanner_args() {
    }

    public closeScanner_args(
      int scannerId)
    {
      this();
      this.scannerId = scannerId;
      setScannerIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeScanner_args(closeScanner_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.scannerId = other.scannerId;
    }

    public closeScanner_args deepCopy() {
      return new closeScanner_args(this);
    }

    @Override
    public void clear() {
      setScannerIdIsSet(false);
      this.scannerId = 0;
    }

    /**
     * the Id of the Scanner to close *
     */
    public int getScannerId() {
      return this.scannerId;
    }

    /**
     * the Id of the Scanner to close *
     */
    public closeScanner_args setScannerId(int scannerId) {
      this.scannerId = scannerId;
      setScannerIdIsSet(true);
      return this;
    }

    public void unsetScannerId() {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCANNERID_ISSET_ID);
    }

    /** Returns true if field scannerId is set (has been assigned a value) and false otherwise */
    public boolean isSetScannerId() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCANNERID_ISSET_ID);
    }

    public void setScannerIdIsSet(boolean value) {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCANNERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCANNER_ID:
        if (value == null) {
          unsetScannerId();
        } else {
          setScannerId((java.lang.Integer)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER_ID:
        return getScannerId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCANNER_ID:
        return isSetScannerId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof closeScanner_args)
        return this.equals((closeScanner_args)that);
      return false;
    }

    public boolean equals(closeScanner_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_scannerId = true;
      boolean that_present_scannerId = true;
      if (this_present_scannerId || that_present_scannerId) {
        if (!(this_present_scannerId && that_present_scannerId))
          return false;
        if (this.scannerId != that.scannerId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + scannerId;

      return hashCode;
    }

    @Override
    public int compareTo(closeScanner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetScannerId()).compareTo(other.isSetScannerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScannerId()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.scannerId, other.scannerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("closeScanner_args(");
      boolean first = true;

      sb.append("scannerId:");
      sb.append(this.scannerId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'scannerId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeScanner_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public closeScanner_argsStandardScheme getScheme() {
        return new closeScanner_argsStandardScheme();
      }
    }

    private static class closeScanner_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<closeScanner_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, closeScanner_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCANNER_ID
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32) {
                struct.scannerId = iprot.readI32();
                struct.setScannerIdIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetScannerId()) {
          throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'scannerId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, closeScanner_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SCANNER_ID_FIELD_DESC);
        oprot.writeI32(struct.scannerId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeScanner_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public closeScanner_argsTupleScheme getScheme() {
        return new closeScanner_argsTupleScheme();
      }
    }

    private static class closeScanner_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<closeScanner_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, closeScanner_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeI32(struct.scannerId);
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, closeScanner_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.scannerId = iprot.readI32();
        struct.setScannerIdIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class closeScanner_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<closeScanner_result, closeScanner_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeScanner_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("closeScanner_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IA_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("ia", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new closeScanner_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new closeScanner_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required
    /**
     * if the scannerId is invalid
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIllegalArgument ia; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      IO((short)1, "io"),
      /**
       * if the scannerId is invalid
       */
      IA((short)2, "ia");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IO
            return IO;
          case 2: // IA
            return IA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      tmpMap.put(_Fields.IA, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("ia", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIllegalArgument.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeScanner_result.class, metaDataMap);
    }

    public closeScanner_result() {
    }

    public closeScanner_result(
      TIOError io,
      TIllegalArgument ia)
    {
      this();
      this.io = io;
      this.ia = ia;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeScanner_result(closeScanner_result other) {
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
      if (other.isSetIa()) {
        this.ia = new TIllegalArgument(other.ia);
      }
    }

    public closeScanner_result deepCopy() {
      return new closeScanner_result(this);
    }

    @Override
    public void clear() {
      this.io = null;
      this.ia = null;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public closeScanner_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    /**
     * if the scannerId is invalid
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIllegalArgument getIa() {
      return this.ia;
    }

    /**
     * if the scannerId is invalid
     */
    public closeScanner_result setIa(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIllegalArgument ia) {
      this.ia = ia;
      return this;
    }

    public void unsetIa() {
      this.ia = null;
    }

    /** Returns true if field ia is set (has been assigned a value) and false otherwise */
    public boolean isSetIa() {
      return this.ia != null;
    }

    public void setIaIsSet(boolean value) {
      if (!value) {
        this.ia = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      case IA:
        if (value == null) {
          unsetIa();
        } else {
          setIa((TIllegalArgument)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IO:
        return getIo();

      case IA:
        return getIa();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IO:
        return isSetIo();
      case IA:
        return isSetIa();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof closeScanner_result)
        return this.equals((closeScanner_result)that);
      return false;
    }

    public boolean equals(closeScanner_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      boolean this_present_ia = true && this.isSetIa();
      boolean that_present_ia = true && that.isSetIa();
      if (this_present_ia || that_present_ia) {
        if (!(this_present_ia && that_present_ia))
          return false;
        if (!this.ia.equals(that.ia))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      hashCode = hashCode * 8191 + ((isSetIa()) ? 131071 : 524287);
      if (isSetIa())
        hashCode = hashCode * 8191 + ia.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(closeScanner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIa()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("closeScanner_result(");
      boolean first = true;

      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ia:");
      if (this.ia == null) {
        sb.append("null");
      } else {
        sb.append(this.ia);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeScanner_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public closeScanner_resultStandardScheme getScheme() {
        return new closeScanner_resultStandardScheme();
      }
    }

    private static class closeScanner_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<closeScanner_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, closeScanner_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IA
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.ia = new TIllegalArgument();
                struct.ia.read(iprot);
                struct.setIaIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, closeScanner_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ia != null) {
          oprot.writeFieldBegin(IA_FIELD_DESC);
          struct.ia.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeScanner_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public closeScanner_resultTupleScheme getScheme() {
        return new closeScanner_resultTupleScheme();
      }
    }

    private static class closeScanner_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<closeScanner_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, closeScanner_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIo()) {
          optionals.set(0);
        }
        if (struct.isSetIa()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
        if (struct.isSetIa()) {
          struct.ia.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, closeScanner_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ia = new TIllegalArgument();
          struct.ia.read(iprot);
          struct.setIaIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mutateRow_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<mutateRow_args, mutateRow_args._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRow_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("mutateRow_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField ROW_MUTATIONS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("rowMutations", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mutateRow_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mutateRow_argsTupleSchemeFactory();

    /**
     * table to apply the mutations
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * mutations to apply
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TRowMutations rowMutations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * table to apply the mutations
       */
      TABLE((short)1, "table"),
      /**
       * mutations to apply
       */
      ROW_MUTATIONS((short)2, "rowMutations");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // ROW_MUTATIONS
            return ROW_MUTATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.ROW_MUTATIONS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("rowMutations", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TRowMutations.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutateRow_args.class, metaDataMap);
    }

    public mutateRow_args() {
    }

    public mutateRow_args(
      java.nio.ByteBuffer table,
      TRowMutations rowMutations)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.rowMutations = rowMutations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutateRow_args(mutateRow_args other) {
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetRowMutations()) {
        this.rowMutations = new TRowMutations(other.rowMutations);
      }
    }

    public mutateRow_args deepCopy() {
      return new mutateRow_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.rowMutations = null;
    }

    /**
     * table to apply the mutations
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * table to apply the mutations
     */
    public mutateRow_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public mutateRow_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * mutations to apply
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TRowMutations getRowMutations() {
      return this.rowMutations;
    }

    /**
     * mutations to apply
     */
    public mutateRow_args setRowMutations(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TRowMutations rowMutations) {
      this.rowMutations = rowMutations;
      return this;
    }

    public void unsetRowMutations() {
      this.rowMutations = null;
    }

    /** Returns true if field rowMutations is set (has been assigned a value) and false otherwise */
    public boolean isSetRowMutations() {
      return this.rowMutations != null;
    }

    public void setRowMutationsIsSet(boolean value) {
      if (!value) {
        this.rowMutations = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case ROW_MUTATIONS:
        if (value == null) {
          unsetRowMutations();
        } else {
          setRowMutations((TRowMutations)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case ROW_MUTATIONS:
        return getRowMutations();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case ROW_MUTATIONS:
        return isSetRowMutations();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mutateRow_args)
        return this.equals((mutateRow_args)that);
      return false;
    }

    public boolean equals(mutateRow_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_rowMutations = true && this.isSetRowMutations();
      boolean that_present_rowMutations = true && that.isSetRowMutations();
      if (this_present_rowMutations || that_present_rowMutations) {
        if (!(this_present_rowMutations && that_present_rowMutations))
          return false;
        if (!this.rowMutations.equals(that.rowMutations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetRowMutations()) ? 131071 : 524287);
      if (isSetRowMutations())
        hashCode = hashCode * 8191 + rowMutations.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mutateRow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRowMutations()).compareTo(other.isSetRowMutations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowMutations()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.rowMutations, other.rowMutations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mutateRow_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rowMutations:");
      if (this.rowMutations == null) {
        sb.append("null");
      } else {
        sb.append(this.rowMutations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (rowMutations == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'rowMutations' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (rowMutations != null) {
        rowMutations.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mutateRow_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public mutateRow_argsStandardScheme getScheme() {
        return new mutateRow_argsStandardScheme();
      }
    }

    private static class mutateRow_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<mutateRow_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, mutateRow_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROW_MUTATIONS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.rowMutations = new TRowMutations();
                struct.rowMutations.read(iprot);
                struct.setRowMutationsIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, mutateRow_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.rowMutations != null) {
          oprot.writeFieldBegin(ROW_MUTATIONS_FIELD_DESC);
          struct.rowMutations.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mutateRow_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public mutateRow_argsTupleScheme getScheme() {
        return new mutateRow_argsTupleScheme();
      }
    }

    private static class mutateRow_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<mutateRow_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, mutateRow_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        struct.rowMutations.write(oprot);
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, mutateRow_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.rowMutations = new TRowMutations();
        struct.rowMutations.read(iprot);
        struct.setRowMutationsIsSet(true);
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mutateRow_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<mutateRow_result, mutateRow_result._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRow_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("mutateRow_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mutateRow_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mutateRow_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutateRow_result.class, metaDataMap);
    }

    public mutateRow_result() {
    }

    public mutateRow_result(
      TIOError io)
    {
      this();
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutateRow_result(mutateRow_result other) {
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public mutateRow_result deepCopy() {
      return new mutateRow_result(this);
    }

    @Override
    public void clear() {
      this.io = null;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public mutateRow_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mutateRow_result)
        return this.equals((mutateRow_result)that);
      return false;
    }

    public boolean equals(mutateRow_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mutateRow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mutateRow_result(");
      boolean first = true;

      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mutateRow_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public mutateRow_resultStandardScheme getScheme() {
        return new mutateRow_resultStandardScheme();
      }
    }

    private static class mutateRow_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<mutateRow_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, mutateRow_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, mutateRow_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mutateRow_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public mutateRow_resultTupleScheme getScheme() {
        return new mutateRow_resultTupleScheme();
      }
    }

    private static class mutateRow_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<mutateRow_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, mutateRow_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, mutateRow_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getScannerResults_args implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<getScannerResults_args, getScannerResults_args._Fields>, java.io.Serializable, Cloneable, Comparable<getScannerResults_args>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("getScannerResults_args");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("table", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SCAN_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("scan", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("numRows", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32, (short)3);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getScannerResults_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getScannerResults_argsTupleSchemeFactory();

    /**
     * the table to get the Scanner for
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required
    /**
     * the scan object to get a Scanner for
     */
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TScan scan; // required
    /**
     * number of rows to return
     */
    public int numRows; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      /**
       * the table to get the Scanner for
       */
      TABLE((short)1, "table"),
      /**
       * the scan object to get a Scanner for
       */
      SCAN((short)2, "scan"),
      /**
       * number of rows to return
       */
      NUM_ROWS((short)3, "numRows");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // SCAN
            return SCAN;
          case 3: // NUM_ROWS
            return NUM_ROWS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMROWS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("table", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.SCAN, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("scan", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TScan.class)));
      tmpMap.put(_Fields.NUM_ROWS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("numRows", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldValueMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getScannerResults_args.class, metaDataMap);
    }

    public getScannerResults_args() {
      this.numRows = 1;

    }

    public getScannerResults_args(
      java.nio.ByteBuffer table,
      TScan scan,
      int numRows)
    {
      this();
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      this.scan = scan;
      this.numRows = numRows;
      setNumRowsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getScannerResults_args(getScannerResults_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(other.table);
      }
      if (other.isSetScan()) {
        this.scan = new TScan(other.scan);
      }
      this.numRows = other.numRows;
    }

    public getScannerResults_args deepCopy() {
      return new getScannerResults_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.scan = null;
      this.numRows = 1;

    }

    /**
     * the table to get the Scanner for
     */
    public byte[] getTable() {
      setTable(com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.rightSize(table));
      return table == null ? null : table.array();
    }

    public java.nio.ByteBuffer bufferForTable() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
    }

    /**
     * the table to get the Scanner for
     */
    public getScannerResults_args setTable(byte[] table) {
      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());
      return this;
    }

    public getScannerResults_args setTable(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {
      this.table = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.copyBinary(table);
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the scan object to get a Scanner for
     */
    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TScan getScan() {
      return this.scan;
    }

    /**
     * the scan object to get a Scanner for
     */
    public getScannerResults_args setScan(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TScan scan) {
      this.scan = scan;
      return this;
    }

    public void unsetScan() {
      this.scan = null;
    }

    /** Returns true if field scan is set (has been assigned a value) and false otherwise */
    public boolean isSetScan() {
      return this.scan != null;
    }

    public void setScanIsSet(boolean value) {
      if (!value) {
        this.scan = null;
      }
    }

    /**
     * number of rows to return
     */
    public int getNumRows() {
      return this.numRows;
    }

    /**
     * number of rows to return
     */
    public getScannerResults_args setNumRows(int numRows) {
      this.numRows = numRows;
      setNumRowsIsSet(true);
      return this;
    }

    public void unsetNumRows() {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMROWS_ISSET_ID);
    }

    /** Returns true if field numRows is set (has been assigned a value) and false otherwise */
    public boolean isSetNumRows() {
      return com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMROWS_ISSET_ID);
    }

    public void setNumRowsIsSet(boolean value) {
      __isset_bitfield = com.xiaomi.infra.thirdparty.org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMROWS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          if (value instanceof byte[]) {
            setTable((byte[])value);
          } else {
            setTable((java.nio.ByteBuffer)value);
          }
        }
        break;

      case SCAN:
        if (value == null) {
          unsetScan();
        } else {
          setScan((TScan)value);
        }
        break;

      case NUM_ROWS:
        if (value == null) {
          unsetNumRows();
        } else {
          setNumRows((java.lang.Integer)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case SCAN:
        return getScan();

      case NUM_ROWS:
        return getNumRows();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case SCAN:
        return isSetScan();
      case NUM_ROWS:
        return isSetNumRows();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getScannerResults_args)
        return this.equals((getScannerResults_args)that);
      return false;
    }

    public boolean equals(getScannerResults_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_scan = true && this.isSetScan();
      boolean that_present_scan = true && that.isSetScan();
      if (this_present_scan || that_present_scan) {
        if (!(this_present_scan && that_present_scan))
          return false;
        if (!this.scan.equals(that.scan))
          return false;
      }

      boolean this_present_numRows = true;
      boolean that_present_numRows = true;
      if (this_present_numRows || that_present_numRows) {
        if (!(this_present_numRows && that_present_numRows))
          return false;
        if (this.numRows != that.numRows)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetScan()) ? 131071 : 524287);
      if (isSetScan())
        hashCode = hashCode * 8191 + scan.hashCode();

      hashCode = hashCode * 8191 + numRows;

      return hashCode;
    }

    @Override
    public int compareTo(getScannerResults_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetScan()).compareTo(other.isSetScan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScan()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.scan, other.scan);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumRows()).compareTo(other.isSetNumRows());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRows()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.numRows, other.numRows);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getScannerResults_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.toString(this.table, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan:");
      if (this.scan == null) {
        sb.append("null");
      } else {
        sb.append(this.scan);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRows:");
      sb.append(this.numRows);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      if (table == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
      }
      if (scan == null) {
        throw new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolException("Required field 'scan' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (scan != null) {
        scan.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getScannerResults_argsStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getScannerResults_argsStandardScheme getScheme() {
        return new getScannerResults_argsStandardScheme();
      }
    }

    private static class getScannerResults_argsStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<getScannerResults_args> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, getScannerResults_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readBinary();
                struct.setTableIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCAN
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.scan = new TScan();
                struct.scan.read(iprot);
                struct.setScanIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_ROWS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.I32) {
                struct.numRows = iprot.readI32();
                struct.setNumRowsIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, getScannerResults_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeBinary(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.scan != null) {
          oprot.writeFieldBegin(SCAN_FIELD_DESC);
          struct.scan.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
        oprot.writeI32(struct.numRows);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getScannerResults_argsTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getScannerResults_argsTupleScheme getScheme() {
        return new getScannerResults_argsTupleScheme();
      }
    }

    private static class getScannerResults_argsTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<getScannerResults_args> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getScannerResults_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBinary(struct.table);
        struct.scan.write(oprot);
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNumRows()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNumRows()) {
          oprot.writeI32(struct.numRows);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getScannerResults_args struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.table = iprot.readBinary();
        struct.setTableIsSet(true);
        struct.scan = new TScan();
        struct.scan.read(iprot);
        struct.setScanIsSet(true);
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.numRows = iprot.readI32();
          struct.setNumRowsIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getScannerResults_result implements com.xiaomi.infra.thirdparty.org.apache.thrift.TBase<getScannerResults_result, getScannerResults_result._Fields>, java.io.Serializable, Cloneable, Comparable<getScannerResults_result>   {
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TStruct("getScannerResults_result");

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("success", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField IO_FIELD_DESC = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField("io", com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getScannerResults_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getScannerResults_resultTupleSchemeFactory();

    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TResult> success; // required
    public @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO((short)1, "io");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO
            return IO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.ListMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST, 
              new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TResult.class))));
      tmpMap.put(_Fields.IO, new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData("io", com.xiaomi.infra.thirdparty.org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.StructMetaData(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, TIOError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.thirdparty.org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getScannerResults_result.class, metaDataMap);
    }

    public getScannerResults_result() {
    }

    public getScannerResults_result(
      java.util.List<TResult> success,
      TIOError io)
    {
      this();
      this.success = success;
      this.io = io;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getScannerResults_result(getScannerResults_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TResult> __this__success = new java.util.ArrayList<TResult>(other.success.size());
        for (TResult other_element : other.success) {
          __this__success.add(new TResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIo()) {
        this.io = new TIOError(other.io);
      }
    }

    public getScannerResults_result deepCopy() {
      return new getScannerResults_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.io = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TResult elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TResult>();
      }
      this.success.add(elem);
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.util.List<TResult> getSuccess() {
      return this.success;
    }

    public getScannerResults_result setSuccess(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.util.List<TResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public TIOError getIo() {
      return this.io;
    }

    public getScannerResults_result setIo(@com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TIOError io) {
      this.io = io;
      return this;
    }

    public void unsetIo() {
      this.io = null;
    }

    /** Returns true if field io is set (has been assigned a value) and false otherwise */
    public boolean isSetIo() {
      return this.io != null;
    }

    public void setIoIsSet(boolean value) {
      if (!value) {
        this.io = null;
      }
    }

    public void setFieldValue(_Fields field, @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TResult>)value);
        }
        break;

      case IO:
        if (value == null) {
          unsetIo();
        } else {
          setIo((TIOError)value);
        }
        break;

      }
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IO:
        return getIo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO:
        return isSetIo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getScannerResults_result)
        return this.equals((getScannerResults_result)that);
      return false;
    }

    public boolean equals(getScannerResults_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_io = true && this.isSetIo();
      boolean that_present_io = true && that.isSetIo();
      if (this_present_io || that_present_io) {
        if (!(this_present_io && that_present_io))
          return false;
        if (!this.io.equals(that.io))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
      if (isSetIo())
        hashCode = hashCode * 8191 + io.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getScannerResults_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo()) {
        lastComparison = com.xiaomi.infra.thirdparty.org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getScannerResults_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io:");
      if (this.io == null) {
        sb.append("null");
      } else {
        sb.append(this.io);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.thirdparty.org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.thirdparty.org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getScannerResults_resultStandardSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getScannerResults_resultStandardScheme getScheme() {
        return new getScannerResults_resultStandardScheme();
      }
    }

    private static class getScannerResults_resultStandardScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme<getScannerResults_result> {

      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol iprot, getScannerResults_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.LIST) {
                {
                  com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list180 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TResult>(_list180.size);
                  @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult _elem181;
                  for (int _i182 = 0; _i182 < _list180.size; ++_i182)
                  {
                    _elem181 = new TResult();
                    _elem181.read(iprot);
                    struct.success.add(_elem181);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO
              if (schemeField.type == com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT) {
                struct.io = new TIOError();
                struct.io.read(iprot);
                struct.setIoIsSet(true);
              } else { 
                com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol oprot, getScannerResults_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TResult _iter183 : struct.success)
            {
              _iter183.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.io != null) {
          oprot.writeFieldBegin(IO_FIELD_DESC);
          struct.io.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getScannerResults_resultTupleSchemeFactory implements com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.SchemeFactory {
      public getScannerResults_resultTupleScheme getScheme() {
        return new getScannerResults_resultTupleScheme();
      }
    }

    private static class getScannerResults_resultTupleScheme extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.TupleScheme<getScannerResults_result> {

      @Override
      public void write(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getScannerResults_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TResult _iter184 : struct.success)
            {
              _iter184.write(oprot);
            }
          }
        }
        if (struct.isSetIo()) {
          struct.io.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol prot, getScannerResults_result struct) throws com.xiaomi.infra.thirdparty.org.apache.thrift.TException {
        com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList _list185 = new com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TList(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TResult>(_list185.size);
            @com.xiaomi.infra.thirdparty.org.apache.thrift.annotation.Nullable TResult _elem186;
            for (int _i187 = 0; _i187 < _list185.size; ++_i187)
            {
              _elem186 = new TResult();
              _elem186.read(iprot);
              struct.success.add(_elem186);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io = new TIOError();
          struct.io.read(iprot);
          struct.setIoIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.thirdparty.org.apache.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.thirdparty.org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
